{"version":3,"sources":["components/UI/TaskCardStyles.js","components/UI/TaskCard.js","components/UI/TaskListStyles.js","components/UI/TaskList.js","components/UI/NotificationStyles.js","components/UI/Notification.js","components/UI/WhoopsiesHeader.js","components/UI/TaskModalStyles.js","components/UI/TaskModal.js","components/Views/DashboardPageView.js","components/Models/TaskModel.js","components/ViewModels/CustomHooks/useTaskCreation.js","components/ViewModels/TaskFormFields.js","components/ViewModels/CustomHooks/useNotifications.js","components/ViewModels/DashboardPageViewModel.js","components/ViewModels/CustomHooks/useModal.js","components/Providers/FormContext.js","components/UI/TaskFormStyles.js","components/UI/TaskForm.js","components/Views/TaskCreationPageView.js","components/Views/InDevelopmentPageView.js","components/Providers/ThemeContext.js","components/UI/NavBarStyles.js","components/UI/NavBar.js","components/UI/SidebarStyles.js","components/UI/Sidebar.js","AppStyles.js","App.js","components/ViewModels/TaskCreationPageViewModel.js","components/ViewModels/InDevelopmentPageViewModel.js","reportWebVitals.js","index.js","indexStyles.js"],"names":["Card","styled","CardUnstyled","props","priority","getPriorityColor","TaskCard","children","defaultProps","List","div","getBriefName","taskName","arrayOfWords","split","words","i","length","splice","join","TaskList","header","tasks","toggleModal","fullHeader","map","task","name","onClick","id","Alert","AlertUnstyled","show","Notification","text","severity","substr","indexOf","toLowerCase","undefined","WhoopsiesHeader","Modal","ModalUnstyled","ModalButtons","TaskModal","open","fields","values","onClose","aria-labelledby","aria-describedby","Grid","container","direction","justify","alignItems","spacing","item","xs","to","field","includes","fieldType","fieldLabel","fieldId","displayFields","variant","color","type","size","DashboardPageView","viewModel","data-testid","showNotification","notificationText","openModal","fieldElements","taskValues","status","tasksOrganizedByStatus","filter","AWS","config","update","accessKeyId","process","REACT_APP_AWS_ACCESS_KEY_ID","secretAccessKey","REACT_APP_AWS_SECRET_ACCESS_KEY","region","endpoint","docClient","DynamoDB","DocumentClient","table","getLatestTaskId","params","TableName","Promise","resolve","reject","scan","err","data","Error","Count","addTaskToDatabase","newTask","description","sprint","version","release","dateCreated","dayjs","format","Item","project","dateUpdated","put","getTasksFromDatabase","Items","TaskModel","useTaskCreation","formLabel","fieldValue","fieldOptions","useState","setFieldElements","resetFieldElements","setTasks","useNotifications","setShowNotification","setNotificationText","toggleNotification","useCallback","message","setTimeout","prioritize","item1","item2","priorities","DashboardPageViewModel","rerender","setOpenModal","setTaskValues","useModal","useEffect","then","retrievedTasks","prioritizedTasks","sort","catch","toString","FormContext","createContext","TextField","TextFieldUnstyled","FormControlLabel","FormControlLabelUnstyled","TaskForm","handleChange","newTaskSubmission","useContext","onSubmit","e","label","value","onChange","event","multiline","fullWidth","rows","select","option","MenuItem","control","Checkbox","checked","TaskCreationPageView","handleSubmit","InDevelopmentPage","ThemeContext","AppBar","AppBarUnstyled","sidebarwidth","SearchBox","SearchIcon","SearchIconUnstyled","InputBase","InputBaseUnstyled","Button","ButtonUnstyled","NavBar","theme","SIDEBAR_WIDTH","startIcon","href","target","rel","placeholder","inputProps","Drawer","DrawerUnstyled","iconStyles","css","DashboardIcon","ListAltIcon","CreateTaskIcon","QueueIcon","GeneralQuestionsIcon","HelpIcon","LogoutIcon","ExitToAppIcon","Sidebar","ListItem","button","NAVBAR_HEIGHT","Content","main","App","render","setRender","dashboardPageViewModel","taskCreationPageViewModel","a","preventDefault","willReset","forEach","Object","assign","newElements","fieldIndexToUpdate","findIndex","TaskCreationPageViewModel","inDevelopmentPageViewModel","InDevelopmentPageViewModel","basename","Provider","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyles","createGlobalStyle","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81ea56de.chunk.js","sourcesContent":["import CardUnstyled from \"@material-ui/core/Card\";\nimport styled from \"styled-components\";\n\nfunction getPriorityColor(props) {\n  switch (props.priority) {\n    case \"Cosmetic\":\n      return \"#E4E4E4\";\n    case \"Low\":\n      return \"#C1E1C1\";\n    case \"Medium\":\n      return \"#FDFD96\";\n    case \"High\":\n      return \"#FFB347\";\n    case \"Showstopper\":\n      return \"#FF6961\";\n    default:\n      return \"#E4E4E4\";\n  }\n}\n\nconst Card = styled(CardUnstyled)`\n  display: grid;\n  grid-template-columns: 85% 15%;\n  margin: 10px;\n  padding: 10px;\n  background-color: ${(props) => getPriorityColor(props)} !important;\n\n  svg {\n    opacity: 0;\n    float: right;\n    position: relative;\n    top: -3px;\n    right: -8px;\n    transition: 0.5s ease;\n  }\n\n  :hover svg {\n    opacity: 1;\n  }\n`;\n\nexport default function TaskCardStyles() {\n  return { Card };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TaskCardStyles from \"./TaskCardStyles\";\n\nexport default function TaskCard({ priority, children }) {\n  const { Card } = TaskCardStyles();\n\n  return <Card priority={priority}>{children}</Card>;\n}\n\nTaskCard.propTypes = {\n  priority: PropTypes.string,\n  children: PropTypes.arrayOf(PropTypes.element),\n};\n\nTaskCard.defaultProps = {\n  priority: \"Cosmetic\",\n  children: [],\n};\n","import styled from \"styled-components\";\n\nconst List = styled.div`\n  border-radius: 4px;\n  background-color: lightgray;\n  padding: 5px 5px 1px 5px;\n  width: 245px;\n`;\n\nexport default function TaskListStyles() {\n  return { List };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport TaskCard from \"./TaskCard\";\nimport TaskListStyles from \"./TaskListStyles\";\n\nfunction getBriefName(taskName) {\n  const maxWords = 5;\n  const arrayOfWords = taskName.split(\" \");\n  let words = 0;\n  let i = 0;\n\n  // Removes consecutive whitespace characters\n  for (; i < arrayOfWords.length && words < maxWords; i += 1) {\n    if (arrayOfWords[i].length) words += 1;\n  }\n\n  return arrayOfWords.splice(0, i).join(\" \");\n}\n\nexport default function TaskList({ header, tasks, toggleModal }) {\n  const { List } = TaskListStyles();\n  const fullHeader = `${header} (${tasks.length})`;\n\n  return (\n    <List>\n      <b>{fullHeader}</b>\n      {tasks.map((task) => (\n        <TaskCard\n          key={task.id}\n          priority={task.priority}\n          toggleModal={toggleModal}\n        >\n          <span>{getBriefName(task.name)}</span>\n          <VisibilityIcon onClick={() => toggleModal(task)} />\n        </TaskCard>\n      ))}\n    </List>\n  );\n}\n\nTaskList.propTypes = {\n  header: PropTypes.string,\n  tasks: PropTypes.arrayOf(PropTypes.object),\n  toggleModal: PropTypes.func,\n};\n\nTaskList.defaultProps = {\n  header: \"TITLE NEEDED\",\n  tasks: [],\n  toggleModal: () => {},\n};\n","import AlertUnstyled from \"@material-ui/lab/Alert\";\nimport styled from \"styled-components\";\n\nconst Alert = styled(AlertUnstyled)`\n  position: absolute;\n  top: ${(props) => (props.show ? \"4.5em\" : \"0em\")};\n  right: 1em;\n  z-index: 999;\n  transition: top 1s ease !important;\n`;\n\nexport default function NotificationStyles() {\n  return { Alert };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport NotificationStyles from \"./NotificationStyles\";\n\nexport default function Notification({ text, show }) {\n  const { Alert } = NotificationStyles();\n  const severity = text.substr(0, text.indexOf(\":\")).toLowerCase() || \"error\";\n\n  return (\n    <Alert show={show ? \"true\" : undefined} severity={severity}>\n      {text}\n    </Alert>\n  );\n}\n\nNotification.propTypes = {\n  text: PropTypes.string,\n  show: PropTypes.bool,\n};\n\nNotification.defaultProps = {\n  text: \"Success\",\n  show: false,\n};\n","import React from \"react\";\n\nexport default function WhoopsiesHeader() {\n  return <p>An Issue Tracker for all your Oopsies!</p>;\n}\n","import ModalUnstyled from \"@material-ui/core/Modal\";\nimport styled from \"styled-components\";\n\nconst Modal = styled(ModalUnstyled)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  #modal-container:nth-of-type(3) {\n    border: 4px solid lightgray;\n    border-radius: 4px;\n    background-color: #fff;\n    padding: 20px;\n    width: 50em;\n\n    :focus {\n      outline: none;\n    }\n  }\n\n  #edit {\n    text-decoration: inherit;\n    color: inherit;\n  }\n\n  #delete {\n    cursor: pointer;\n  }\n`;\n\nconst ModalButtons = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport default function TaskModalStyles() {\n  return { Modal, ModalButtons };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport TaskModalStyles from \"./TaskModalStyles\";\n\nconst displayFields = (field, values) => {\n  if ([\"text\", \"text-long\", \"select\"].includes(field.fieldType) && values.id) {\n    return (\n      <p key={field.fieldId}>\n        {`${field.fieldLabel}: ${values[`${field.fieldId}`]}`}\n      </p>\n    );\n  }\n  return null;\n};\n\nexport default function TaskModal(props) {\n  const { open, toggleModal, fields, values } = props;\n  const { Modal, ModalButtons } = TaskModalStyles();\n\n  return (\n    <Modal\n      open={open}\n      onClose={toggleModal}\n      aria-labelledby=\"modal-title\"\n      aria-describedby=\"modal-description\"\n    >\n      <div id=\"modal-container\">\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          <Grid item xs={11}>\n            <h2 id=\"modal-title\">{values.name}</h2>\n          </Grid>\n          <Grid item xs={1}>\n            <Link to=\"/whoopsies/edit-task\" id=\"edit\">\n              <EditIcon />\n            </Link>\n            <DeleteIcon id=\"delete\" />\n          </Grid>\n        </Grid>\n\n        {fields.map((field) => displayFields(field, values))}\n\n        <ModalButtons>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"button\"\n            size=\"large\"\n            onClick={toggleModal}\n          >\n            Close\n          </Button>\n        </ModalButtons>\n      </div>\n    </Modal>\n  );\n}\n\nTaskModal.propTypes = {\n  open: PropTypes.bool,\n  fields: PropTypes.arrayOf(PropTypes.object),\n  values: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    description: PropTypes.string,\n    status: PropTypes.string,\n    priority: PropTypes.string,\n    sprint: PropTypes.string,\n    version: PropTypes.string,\n    release: PropTypes.string,\n  }),\n  toggleModal: PropTypes.func,\n};\n\nTaskModal.defaultProps = {\n  open: false,\n  fields: [],\n  values: {},\n  toggleModal: () => {},\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TaskList from \"../UI/TaskList\";\nimport Notification from \"../UI/Notification\";\nimport WhoopsiesHeader from \"../UI/WhoopsiesHeader\";\nimport TaskModal from \"../UI/TaskModal\";\n\nexport default function DashboardPageView({ viewModel }) {\n  const STATUSES = [\n    \"TO DO\",\n    \"IN ANALYSIS\",\n    \"IN DEVELOPMENT\",\n    \"IN TESTING\",\n    \"DONE\",\n  ];\n\n  return (\n    <div data-testid=\"dashboard-page-view\">\n      <WhoopsiesHeader />\n      <Notification\n        show={viewModel.showNotification}\n        text={viewModel.notificationText}\n      />\n      <TaskModal\n        open={viewModel.openModal}\n        toggleModal={viewModel.toggleModal}\n        fields={viewModel.fieldElements}\n        values={viewModel.taskValues}\n      />\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"flex-start\"\n        spacing={2}\n      >\n        {STATUSES.map((status) => {\n          const tasksOrganizedByStatus = viewModel.tasks.filter(\n            (task) => status === task.status\n          );\n          return (\n            <Grid key={status} item>\n              <TaskList\n                header={status}\n                tasks={tasksOrganizedByStatus}\n                toggleModal={viewModel.toggleModal}\n              />\n            </Grid>\n          );\n        })}\n      </Grid>\n    </div>\n  );\n}\n\nDashboardPageView.propTypes = {\n  viewModel: PropTypes.shape({\n    tasks: PropTypes.arrayOf(PropTypes.object),\n    fieldElements: PropTypes.arrayOf(PropTypes.object),\n    showNotification: PropTypes.bool,\n    notificationText: PropTypes.string,\n    openModal: PropTypes.bool,\n    taskValues: PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      description: PropTypes.string,\n      status: PropTypes.string,\n      priority: PropTypes.string,\n      sprint: PropTypes.string,\n      version: PropTypes.string,\n      release: PropTypes.string,\n    }),\n    toggleModal: PropTypes.func,\n  }),\n};\n\nDashboardPageView.defaultProps = {\n  viewModel: {\n    tasks: [],\n    fieldElements: [],\n    showNotification: false,\n    notificationText: \"\",\n    openModal: false,\n    taskValues: {},\n    toggleModal: () => {},\n  },\n};\n","import AWS from \"aws-sdk\";\nimport dayjs from \"dayjs\";\n\nAWS.config.update({\n  accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY_ID,\n  secretAccessKey: process.env.REACT_APP_AWS_SECRET_ACCESS_KEY,\n  region: \"us-east-2\",\n  endpoint: \"https://dynamodb.us-east-2.amazonaws.com\",\n});\n\nconst docClient = new AWS.DynamoDB.DocumentClient();\nconst table = \"Oopsies\";\nconst project = \"Whoopsies!\";\n\nfunction getLatestTaskId() {\n  const params = {\n    TableName: table,\n  };\n\n  return new Promise((resolve, reject) => {\n    docClient.scan(params, (err, data) => {\n      return err\n        ? reject(new Error(`Error: unable to scan table. ${err}`))\n        : resolve(data.Count + 1);\n    });\n  });\n}\n\nfunction addTaskToDatabase(id, newTask) {\n  const {\n    name,\n    description,\n    status,\n    priority,\n    sprint,\n    version,\n    release,\n  } = newTask;\n  const dateCreated = dayjs().format();\n\n  const params = {\n    TableName: table,\n    Item: {\n      project,\n      id,\n      name,\n      description,\n      status,\n      priority,\n      sprint,\n      version,\n      release,\n      dateCreated,\n      dateUpdated: dateCreated,\n    },\n  };\n\n  return new Promise((resolve, reject) => {\n    docClient.put(params, (err) => {\n      return err\n        ? reject(new Error(`Error: unable to add item. ${err}`))\n        : resolve();\n    });\n  });\n}\n\nfunction getTasksFromDatabase() {\n  const params = {\n    TableName: table,\n  };\n\n  return new Promise((resolve, reject) => {\n    docClient.scan(params, (err, data) => {\n      return err\n        ? reject(new Error(`Error: unable to scan table. ${err}`))\n        : resolve(data.Items);\n    });\n  });\n}\n\nexport default function TaskModel() {\n  return { getLatestTaskId, addTaskToDatabase, getTasksFromDatabase };\n}\n","import { useState } from \"react\";\nimport TaskFormFields from \"../TaskFormFields\";\n\nexport default function useTaskCreation() {\n  const { formLabel } = TaskFormFields();\n  const [fieldElements, setFieldElements] = useState(TaskFormFields().fields);\n  const [tasks, setTasks] = useState([]);\n\n  return {\n    formLabel,\n    resetFieldElements: TaskFormFields().fields,\n    fieldElements,\n    tasks,\n    setFieldElements,\n    setTasks,\n  };\n}\n","export default function TaskFormFields() {\n  return {\n    formLabel: \"Task Creation Form\",\n    fields: [\n      {\n        fieldId: \"name\",\n        fieldLabel: \"Task Name\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"status\",\n        fieldLabel: \"Status\",\n        fieldType: \"select\",\n        fieldOptions: [\n          \"TO DO\",\n          \"IN ANALYSIS\",\n          \"IN DEVELOPMENT\",\n          \"IN TESTING\",\n          \"DONE\",\n        ],\n        fieldValue: \"TO DO\",\n      },\n      {\n        fieldId: \"priority\",\n        fieldLabel: \"Priority\",\n        fieldType: \"select\",\n        fieldOptions: [\"Cosmetic\", \"Low\", \"Medium\", \"High\", \"Showstopper\"],\n        fieldValue: \"Cosmetic\",\n      },\n      {\n        fieldId: \"sprint\",\n        fieldLabel: \"Sprint\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"version\",\n        fieldLabel: \"Project Version\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"release\",\n        fieldLabel: \"Release Date\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"description\",\n        fieldLabel: \"Task Description\",\n        fieldType: \"text-long\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"create\",\n        fieldLabel: \"Create\",\n        fieldType: \"button\",\n        fieldValue: null,\n      },\n      {\n        fieldId: \"reset\",\n        fieldLabel: \"Reset the form after creating this task\",\n        fieldType: \"checkbox\",\n        fieldValue: true,\n      },\n    ],\n  };\n}\n","import { useState, useCallback } from \"react\";\n\nexport default function useNotifications() {\n  const [showNotification, setShowNotification] = useState(false);\n  const [notificationText, setNotificationText] = useState(\"\");\n\n  const toggleNotification = useCallback(\n    (message) => {\n      setNotificationText(message);\n      setShowNotification(true);\n      setTimeout(() => {\n        setShowNotification(false);\n      }, 5000);\n    },\n    [setShowNotification, setNotificationText]\n  );\n\n  return {\n    showNotification,\n    notificationText,\n    toggleNotification,\n  };\n}\n","import { useEffect } from \"react\";\nimport TaskModel from \"../Models/TaskModel\";\nimport useTaskCreation from \"./CustomHooks/useTaskCreation\";\nimport useNotifications from \"./CustomHooks/useNotifications\";\nimport useModal from \"./CustomHooks/useModal\";\n\nfunction prioritize(item1, item2) {\n  const priorities = [\"Cosmetic\", \"Low\", \"Medium\", \"High\", \"Showstopper\"];\n  return priorities.indexOf(item1.priority) > priorities.indexOf(item2.priority)\n    ? -1\n    : 1;\n}\n\nexport default function DashboardPageViewModel(rerender) {\n  const { getTasksFromDatabase } = TaskModel();\n  const { tasks, fieldElements, setTasks } = useTaskCreation();\n  const {\n    showNotification,\n    notificationText,\n    toggleNotification,\n  } = useNotifications();\n  const { openModal, taskValues, toggleModal } = useModal();\n\n  useEffect(() => {\n    getTasksFromDatabase()\n      .then((retrievedTasks) => {\n        const prioritizedTasks = [...retrievedTasks].sort(prioritize);\n\n        setTasks(prioritizedTasks);\n        toggleNotification(\"Success: retrieved the tasks!\");\n      })\n      .catch((err) => {\n        toggleNotification(err.toString());\n      });\n  }, [rerender, getTasksFromDatabase, setTasks, toggleNotification]);\n\n  return {\n    tasks,\n    fieldElements,\n    showNotification,\n    notificationText,\n    openModal,\n    taskValues,\n    toggleModal,\n  };\n}\n","import { useState } from \"react\";\n\nexport default function useModal() {\n  const [openModal, setOpenModal] = useState(false);\n  const [taskValues, setTaskValues] = useState({});\n\n  const toggleModal = (task) => {\n    setTaskValues(task);\n    setOpenModal(!openModal);\n  };\n\n  return {\n    openModal,\n    taskValues,\n    toggleModal,\n  };\n}\n","import { createContext } from \"react\";\n\nconst FormContext = createContext(null);\nexport default FormContext;\n","import TextFieldUnstyled from \"@material-ui/core/TextField\";\nimport FormControlLabelUnstyled from \"@material-ui/core/FormControlLabel\";\nimport styled from \"styled-components\";\n\nconst TextField = styled(TextFieldUnstyled)`\n  margin: 0 10px 10px 0 !important;\n`;\n\nconst FormControlLabel = styled(FormControlLabelUnstyled)`\n  margin-left: 0px !important;\n`;\n\nexport default function TaskFormStyles() {\n  return { TextField, FormControlLabel };\n}\n","import React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@material-ui/core/Button\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormContext from \"../Providers/FormContext\";\nimport TaskFormStyles from \"./TaskFormStyles\";\n\nexport default function TaskForm({ fields, handleChange }) {\n  const { TextField, FormControlLabel } = TaskFormStyles();\n\n  const newTaskSubmission = useContext(FormContext);\n\n  const displayFields = (field) => {\n    switch (field.fieldType) {\n      case \"text\":\n        return (\n          <TextField\n            key={field.fieldId}\n            label={field.fieldLabel}\n            value={field.fieldValue}\n            size=\"small\"\n            variant=\"outlined\"\n            onChange={(event) => handleChange(field.fieldId, event)}\n          />\n        );\n      case \"text-long\":\n        return (\n          <TextField\n            key={field.fieldId}\n            label={field.fieldLabel}\n            value={field.fieldValue}\n            multiline\n            fullWidth\n            rows={5}\n            size=\"small\"\n            variant=\"outlined\"\n            onChange={(event) => handleChange(field.fieldId, event)}\n          />\n        );\n      case \"select\":\n        return (\n          <TextField\n            key={field.fieldId}\n            label={field.fieldLabel}\n            value={field.fieldValue}\n            select\n            size=\"small\"\n            variant=\"outlined\"\n            onChange={(event) => handleChange(field.fieldId, event)}\n          >\n            {field.fieldOptions.map((option) => (\n              <MenuItem key={option} value={option}>\n                {option}\n              </MenuItem>\n            ))}\n          </TextField>\n        );\n      case \"button\":\n        return (\n          <Button\n            key={field.fieldId}\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            size=\"large\"\n          >\n            {field.fieldLabel}\n          </Button>\n        );\n      case \"checkbox\":\n        return (\n          <FormControlLabel\n            key={field.fieldId}\n            label={field.fieldLabel}\n            control={\n              // eslint-disable-next-line react/jsx-wrap-multilines\n              <Checkbox\n                checked={field.fieldValue}\n                onChange={(event) => handleChange(field.fieldId, event)}\n                color=\"primary\"\n              />\n            }\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <form onSubmit={(e) => newTaskSubmission(e)}>\n      {fields.map(displayFields)}\n    </form>\n  );\n}\n\nTaskForm.propTypes = {\n  fields: PropTypes.arrayOf(PropTypes.object),\n  handleChange: PropTypes.func,\n};\n\nTaskForm.defaultProps = {\n  fields: [],\n  handleChange: () => {},\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TaskForm from \"../UI/TaskForm\";\nimport Notification from \"../UI/Notification\";\nimport WhoopsiesHeader from \"../UI/WhoopsiesHeader\";\n\nexport default function TaskCreationPageView({ viewModel }) {\n  return (\n    <div data-testid=\"task-creation-page-view\">\n      <WhoopsiesHeader />\n      <h2>{viewModel.formLabel}</h2>\n      <Notification\n        show={viewModel.showNotification}\n        text={viewModel.notificationText}\n      />\n      <TaskForm\n        fields={viewModel.fieldElements}\n        handleChange={viewModel.handleChange}\n      />\n    </div>\n  );\n}\n\nTaskCreationPageView.propTypes = {\n  viewModel: PropTypes.shape({\n    formLabel: PropTypes.string,\n    fieldElements: PropTypes.arrayOf(PropTypes.object),\n    showNotification: PropTypes.bool,\n    notificationText: PropTypes.string,\n    handleSubmit: PropTypes.func,\n    handleChange: PropTypes.func,\n  }),\n};\n\nTaskCreationPageView.defaultProps = {\n  viewModel: {\n    formLabel: \"\",\n    fieldElements: [],\n    showNotification: false,\n    notificationText: \"\",\n    handleSubmit: () => {},\n    handleChange: () => {},\n  },\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Notification from \"../UI/Notification\";\n\nexport default function InDevelopmentPage({ viewModel }) {\n  return (\n    <div data-testid=\"in-development-page-view\">\n      <h1>Whoopsies! Looks like you made an oopsy!</h1>\n      <p> This page does not exist yet. Sorry about that! 😅</p>\n      <Notification\n        show={viewModel.showNotification}\n        text={viewModel.notificationText}\n      />\n    </div>\n  );\n}\n\nInDevelopmentPage.propTypes = {\n  viewModel: PropTypes.shape({\n    showNotification: PropTypes.bool,\n    notificationText: PropTypes.string,\n  }),\n};\n\nInDevelopmentPage.defaultProps = {\n  viewModel: {\n    showNotification: false,\n    notificationText: \"\",\n  },\n};\n","import { createContext } from \"react\";\n\nconst ThemeContext = createContext(null);\nexport default ThemeContext;\n","import AppBarUnstyled from \"@material-ui/core/AppBar\";\nimport SearchIconUnstyled from \"@material-ui/icons/Search\";\nimport InputBaseUnstyled from \"@material-ui/core/InputBase\";\nimport ButtonUnstyled from \"@material-ui/core/Button\";\nimport styled from \"styled-components\";\n\nconst SEARCH_BOX_WIDTH = 20;\nconst INPUT_BASE_LEFT_MARGIN = 2;\n\nconst AppBar = styled(AppBarUnstyled)`\n  display: block !important;\n  padding: 0.5em 0 0.5em\n    ${({ sidebarwidth }) => (sidebarwidth + 0.5).toString()}em;\n`;\n\nconst SearchBox = styled.div`\n  display: inline-block;\n  background-color: #5c6bc0;\n  &:hover {\n    background-color: #6f7dc8;\n  }\n  border-radius: 7px;\n  width: ${SEARCH_BOX_WIDTH.toString()}em;\n`;\n\nconst SearchIcon = styled(SearchIconUnstyled)`\n  position: absolute;\n  margin: 3px;\n`;\n\nconst InputBase = styled(InputBaseUnstyled)`\n  margin-left: ${INPUT_BASE_LEFT_MARGIN.toString()}em;\n  width: ${(SEARCH_BOX_WIDTH - INPUT_BASE_LEFT_MARGIN).toString()}em;\n`;\n\nconst Button = styled(ButtonUnstyled)`\n  margin: 0 1em !important;\n  background-color: white !important;\n\n  a {\n    text-decoration: inherit;\n    color: inherit;\n  }\n`;\n\nexport default function NavBarStyles() {\n  return { AppBar, SearchBox, SearchIcon, InputBase, Button };\n}\n","import React, { useContext } from \"react\";\nimport Assignment from \"@material-ui/icons/Assignment\";\nimport ThemeContext from \"../Providers/ThemeContext\";\nimport NavBarStyles from \"./NavBarStyles\";\n\nexport default function NavBar() {\n  const { AppBar, SearchBox, SearchIcon, InputBase, Button } = NavBarStyles();\n  const theme = useContext(ThemeContext);\n\n  return (\n    <AppBar sidebarwidth={theme.SIDEBAR_WIDTH}>\n      <b>Whoopsies!</b>\n      <Button variant=\"outlined\" color=\"primary\" startIcon={<Assignment />}>\n        <a\n          href=\"https://docs.google.com/document/d/1FgaHyxg0d-MKl4OlfG0u36fmp6jM5nZxvI3ZeXUq4vs/edit?usp=sharing\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          SRS\n        </a>\n      </Button>\n      <SearchBox>\n        <SearchIcon />\n        <InputBase\n          placeholder=\"Search by project\"\n          inputProps={{ \"aria-label\": \"search\" }}\n        />\n      </SearchBox>\n    </AppBar>\n  );\n}\n","import DrawerUnstyled from \"@material-ui/core/Drawer\";\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\nimport QueueIcon from \"@material-ui/icons/Queue\";\nimport HelpIcon from \"@material-ui/icons/Help\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport styled, { css } from \"styled-components\";\n\nconst Drawer = styled(DrawerUnstyled)`\n  * {\n    text-decoration: inherit;\n    color: inherit;\n    cursor: auto;\n  }\n`;\n\nconst iconStyles = css`\n  vertical-align: top;\n  font-size: 1.1rem !important;\n  margin-right: 8px;\n`;\n\nconst DashboardIcon = styled(ListAltIcon)`\n  ${iconStyles}\n`;\n\nconst CreateTaskIcon = styled(QueueIcon)`\n  ${iconStyles}\n`;\n\nconst GeneralQuestionsIcon = styled(HelpIcon)`\n  ${iconStyles}\n`;\n\nconst LogoutIcon = styled(ExitToAppIcon)`\n  ${iconStyles}\n  transform: scaleX(-1);\n`;\n\nexport default function SidebarStyles() {\n  return {\n    Drawer,\n    DashboardIcon,\n    CreateTaskIcon,\n    GeneralQuestionsIcon,\n    LogoutIcon,\n  };\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport SidebarStyles from \"./SidebarStyles\";\n\nexport default function Sidebar() {\n  const {\n    Drawer,\n    DashboardIcon,\n    CreateTaskIcon,\n    GeneralQuestionsIcon,\n    LogoutIcon,\n  } = SidebarStyles();\n\n  return (\n    <Drawer variant=\"permanent\">\n      <List>\n        <Link to=\"/whoopsies/dashboard\">\n          <ListItem button>\n            <DashboardIcon />\n            Dashboard\n          </ListItem>\n        </Link>\n        <Link to=\"/whoopsies/create-task\">\n          <ListItem button>\n            <CreateTaskIcon />\n            Create Task\n          </ListItem>\n        </Link>\n        <Link to=\"/whoopsies/general-questions\">\n          <ListItem button>\n            <GeneralQuestionsIcon />\n            General Questions\n          </ListItem>\n        </Link>\n        <Link to=\"/whoopsies/\">\n          <ListItem button>\n            <LogoutIcon />\n            Logout\n          </ListItem>\n        </Link>\n      </List>\n    </Drawer>\n  );\n}\n","import styled from \"styled-components\";\n\nconst NAVBAR_HEIGHT = 4;\nconst SIDEBAR_WIDTH = 12;\n\nconst theme = {\n  NAVBAR_HEIGHT,\n  SIDEBAR_WIDTH,\n};\n\nconst Content = styled.main`\n  margin: ${NAVBAR_HEIGHT.toString()}em 0 0 ${SIDEBAR_WIDTH.toString()}em;\n`;\n\nexport default function AppStyles() {\n  return { theme, Content };\n}\n","import { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport DashboardPageView from \"./components/Views/DashboardPageView\";\nimport DashboardPageViewModel from \"./components/ViewModels/DashboardPageViewModel\";\nimport TaskCreationPageView from \"./components/Views/TaskCreationPageView\";\nimport TaskCreationPageViewModel from \"./components/ViewModels/TaskCreationPageViewModel\";\nimport InDevelopmentPageView from \"./components/Views/InDevelopmentPageView\";\nimport InDevelopmentPageViewModel from \"./components/ViewModels/InDevelopmentPageViewModel\";\nimport FormContext from \"./components/Providers/FormContext\";\nimport ThemeContext from \"./components/Providers/ThemeContext\";\nimport NavBar from \"./components/UI/NavBar\";\nimport Sidebar from \"./components/UI/Sidebar\";\nimport AppStyles from \"./AppStyles\";\n\nfunction App() {\n  const { theme, Content } = AppStyles();\n\n  // The value of render does not matter;\n  // I just want the effect hook to rerender the tasks in the Dashboard page\n  const [render, setRender] = useState(true);\n\n  const dashboardPageViewModel = DashboardPageViewModel(render);\n  const taskCreationPageViewModel = TaskCreationPageViewModel();\n  const inDevelopmentPageViewModel = InDevelopmentPageViewModel();\n\n  const newTaskSubmission = (e) => {\n    taskCreationPageViewModel.handleSubmit(e).then(() => setRender(!render));\n  };\n\n  return (\n    <Router basename=\"/\">\n      <ThemeContext.Provider value={theme}>\n        <NavBar />\n        <Sidebar />\n        <Content>\n          <Switch>\n            <Route path=\"/whoopsies/dashboard\">\n              <DashboardPageView viewModel={dashboardPageViewModel} />\n            </Route>\n            <Route path=\"/whoopsies/create-task\">\n              <FormContext.Provider value={newTaskSubmission}>\n                <TaskCreationPageView viewModel={taskCreationPageViewModel} />\n              </FormContext.Provider>\n            </Route>\n            <Route path=\"*\">\n              <InDevelopmentPageView viewModel={inDevelopmentPageViewModel} />\n            </Route>\n          </Switch>\n        </Content>\n      </ThemeContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","import TaskModel from \"../Models/TaskModel\";\nimport useTaskCreation from \"./CustomHooks/useTaskCreation\";\nimport useNotifications from \"./CustomHooks/useNotifications\";\n\nexport default function TaskCreationPageViewModel() {\n  const { getLatestTaskId, addTaskToDatabase } = TaskModel();\n  const {\n    formLabel,\n    resetFieldElements,\n    fieldElements,\n    setFieldElements,\n  } = useTaskCreation();\n  const {\n    showNotification,\n    notificationText,\n    toggleNotification,\n  } = useNotifications();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const newTask = {};\n    const willReset = fieldElements[fieldElements.length - 1].fieldValue;\n\n    fieldElements.forEach((field) => {\n      Object.assign(newTask, { [field.fieldId]: field.fieldValue });\n    });\n\n    try {\n      const id = await getLatestTaskId();\n      await addTaskToDatabase(id, newTask);\n      toggleNotification(\"Success: added the item!\");\n      if (willReset) {\n        setFieldElements(resetFieldElements);\n      }\n    } catch (err) {\n      toggleNotification(err.toString());\n    }\n    return Promise.resolve();\n  };\n\n  const handleChange = (id, event) => {\n    const newElements = [...fieldElements];\n    const fieldIndexToUpdate = newElements.findIndex(\n      (field) => id === field.fieldId\n    );\n\n    if (id === \"reset\") {\n      newElements[fieldIndexToUpdate].fieldValue = event.target.checked;\n    } else {\n      newElements[fieldIndexToUpdate].fieldValue = event.target.value;\n    }\n    setFieldElements(newElements);\n  };\n\n  return {\n    formLabel,\n    fieldElements,\n    showNotification,\n    notificationText,\n    handleSubmit,\n    handleChange,\n  };\n}\n","import { useEffect } from \"react\";\nimport useNotifications from \"./CustomHooks/useNotifications\";\n\nexport default function InDevelopmentPageViewModel() {\n  const {\n    showNotification,\n    notificationText,\n    toggleNotification,\n  } = useNotifications();\n\n  useEffect(() => {\n    toggleNotification(\"Info: sorry this page does not exist... yet!\");\n  }, [toggleNotification]);\n\n  return { showNotification, notificationText };\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport indexStyles from \"./indexStyles\";\n\nconst GlobalStyles = indexStyles();\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createGlobalStyle } from \"styled-components\";\n\nexport default function GlobalStyle() {\n  return createGlobalStyle`\n    * {\n      font-family: 'PT Sans', sans-serif;\n    }\n  `;\n}\n"],"sourceRoot":""}