{"version":3,"sources":["components/Models/TaskModel.js","components/ViewModels/TaskViewModel.js","components/UI/TaskCardStyles.js","components/UI/TaskCard.js","components/UI/TaskListStyles.js","components/UI/TaskList.js","components/UI/WhoopsiesHeader.js","components/UI/TaskModalStyles.js","components/UI/TaskModal.js","components/Views/DashboardPageView.js","components/CustomHooks/useTaskCreation.js","components/FormFields/TaskFormFields.js","components/ViewModels/DashboardPageViewModel.js","components/CustomHooks/useModal.js","components/Providers/FormContext.js","components/UI/TaskFormStyles.js","components/UI/TaskForm.js","components/Views/TaskFormPageView.js","components/ViewModels/TaskFormPageViewModel.js","components/Views/InDevelopmentPageView.js","components/Providers/ThemeContext.js","components/UI/NavBarStyles.js","components/UI/NavBar.js","components/UI/SidebarStyles.js","components/UI/Sidebar.js","components/UI/NotificationStyles.js","components/UI/Notification.js","AppStyles.js","App.js","components/CustomHooks/useNotifications.js","reportWebVitals.js","index.js","indexStyles.js"],"names":["AWS","config","update","accessKeyId","process","REACT_APP_AWS_ACCESS_KEY_ID","secretAccessKey","REACT_APP_AWS_SECRET_ACCESS_KEY","region","endpoint","docClient","DynamoDB","DocumentClient","table","getLatestTaskId","params","TableName","Promise","resolve","reject","scan","err","data","taskId","Items","forEach","item","id","Error","addTaskToDatabase","newTask","name","description","status","priority","sprint","project","version","release","dateCreated","dayjs","format","Item","dateUpdated","put","getTasksFromDatabase","FilterExpression","ExpressionAttributeNames","ExpressionAttributeValues","updateTaskToDatabase","updatedTask","Key","UpdateExpression","deleteTaskFromDatabase","delete","prioritize","item1","item2","priorities","indexOf","TaskViewModel","resetFieldElements","setFieldElements","setTasks","toggleNotification","useState","render","setRender","resetTaskForm","addTask","e","fields","a","preventDefault","willReset","length","fieldValue","field","Object","assign","fieldId","toString","getTask","useCallback","localStorage","getItem","then","retrievedTasks","prioritizedTasks","sort","setItem","catch","projectOptions","deleteTask","editTask","switchProjects","target","innerText","window","location","reload","Card","styled","CardUnstyled","adjust","props","getPriorityColor","TaskCard","children","topMarginAdjust","defaultProps","List","div","getBriefName","taskName","arrayOfWords","split","words","i","splice","join","TaskList","header","tasks","toggleModal","open","setOpen","fullHeader","map","task","onClick","slice","index","Collapse","in","timeout","unmountOnExit","WhoopsiesHeader","Modal","ModalUnstyled","ModalButtons","TaskModal","values","handleEdit","handleDelete","onClose","aria-labelledby","aria-describedby","Grid","container","direction","justify","alignItems","spacing","xs","to","includes","fieldType","fieldLabel","displayFields","variant","color","type","size","DashboardPageView","viewModel","useEffect","data-testid","openModal","fieldElements","taskValues","saveTaskToLocalStorage","tasksOrganizedByStatus","filter","useTaskCreation","formLabel1","formLabel2","fieldOptions","fieldLabel1","fieldLabel2","DashboardPageViewModel","setOpenModal","setTaskValues","useModal","JSON","stringify","FormContext","createContext","TextField","TextFieldUnstyled","label","FormControlLabel","FormControlLabelUnstyled","TaskForm","handleChange","onCreateTaskPage","useLocation","pathname","handleSubmit","useContext","onSubmit","value","onChange","event","multiline","fullWidth","rows","select","option","MenuItem","disabled","control","Checkbox","checked","TaskFormPageView","formLabel","hydrateTaskFromLocalStorage","TaskFormPageViewModel","newElements","fieldIndexToUpdate","findIndex","hydratedTask","storedTask","parse","removeItem","InDevelopmentPage","ThemeContext","AppBar","AppBarUnstyled","sidebarwidth","SearchBox","SearchIcon","SearchIconUnstyled","InputBase","InputBaseUnstyled","Button","ButtonUnstyled","NavBar","handleSearch","theme","SIDEBAR_WIDTH","startIcon","href","rel","Autocomplete","options","renderInput","ref","InputProps","inputProps","placeholder","Drawer","DrawerUnstyled","iconStyles","css","DashboardIcon","ListAltIcon","CreateTaskIcon","QueueIcon","GeneralQuestionsIcon","HelpIcon","LogoutIcon","ExitToAppIcon","Sidebar","ListItem","button","Alert","AlertUnstyled","show","Notification","text","severity","substr","toLowerCase","undefined","NAVBAR_HEIGHT","Content","main","App","showNotification","setShowNotification","notificationText","setNotificationText","message","setTimeout","useNotifications","basename","Provider","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyles","createGlobalStyle","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df079aea.chunk.js","sourcesContent":["import AWS from \"aws-sdk\";\nimport dayjs from \"dayjs\";\n\nAWS.config.update({\n  accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY_ID,\n  secretAccessKey: process.env.REACT_APP_AWS_SECRET_ACCESS_KEY,\n  region: \"us-east-2\",\n  endpoint: \"https://dynamodb.us-east-2.amazonaws.com\",\n});\n\nconst docClient = new AWS.DynamoDB.DocumentClient();\nconst table = \"Oopsies\";\n\nfunction getLatestTaskId() {\n  const params = {\n    TableName: table,\n  };\n\n  return new Promise((resolve, reject) => {\n    docClient.scan(params, (err, data) => {\n      let taskId = 0;\n\n      data.Items.forEach((item) => {\n        if (item.id > taskId) {\n          taskId = item.id;\n        }\n      });\n\n      return err\n        ? reject(new Error(`Error: unable to scan table. ${err}`))\n        : resolve(taskId + 1);\n    });\n  });\n}\n\nfunction addTaskToDatabase(id, newTask) {\n  const {\n    name,\n    description,\n    status,\n    priority,\n    sprint,\n    project,\n    version,\n    release,\n  } = newTask;\n  const dateCreated = dayjs().format();\n\n  const params = {\n    TableName: table,\n    Item: {\n      project,\n      id,\n      name,\n      description,\n      status,\n      priority,\n      sprint,\n      version,\n      release,\n      dateCreated,\n      dateUpdated: dateCreated,\n    },\n  };\n\n  return new Promise((resolve, reject) => {\n    docClient.put(params, (err) => {\n      return err\n        ? reject(new Error(`Error: unable to add item. ${err}`))\n        : resolve();\n    });\n  });\n}\n\nfunction getTasksFromDatabase(project) {\n  const params = {\n    TableName: table,\n    FilterExpression: \"#project = :project\",\n    ExpressionAttributeNames: {\n      \"#project\": \"project\",\n    },\n    ExpressionAttributeValues: {\n      \":project\": project,\n    },\n  };\n\n  return new Promise((resolve, reject) => {\n    docClient.scan(params, (err, data) => {\n      return err\n        ? reject(new Error(`Error: unable to scan table. ${err}`))\n        : resolve(data.Items);\n    });\n  });\n}\n\nfunction updateTaskToDatabase(updatedTask) {\n  const {\n    id,\n    name,\n    description,\n    status,\n    priority,\n    sprint,\n    project,\n    version,\n    release,\n  } = updatedTask;\n\n  const params = {\n    TableName: table,\n    Key: {\n      project,\n      id,\n    },\n    UpdateExpression:\n      \"set #name = :name, #description = :description, #status = :status, #priority = :priority, #sprint = :sprint, #version = :version, #release = :release, #dateUpdated = :dateUpdated\",\n    ExpressionAttributeNames: {\n      \"#name\": \"name\",\n      \"#description\": \"description\",\n      \"#status\": \"status\",\n      \"#priority\": \"priority\",\n      \"#sprint\": \"sprint\",\n      \"#version\": \"version\",\n      \"#release\": \"release\",\n      \"#dateUpdated\": \"dateUpdated\",\n    },\n    ExpressionAttributeValues: {\n      \":name\": name,\n      \":description\": description,\n      \":status\": status,\n      \":priority\": priority,\n      \":sprint\": sprint,\n      \":version\": version,\n      \":release\": release,\n      \":dateUpdated\": dayjs().format(),\n    },\n  };\n\n  return new Promise((resolve, reject) => {\n    docClient.update(params, (err) => {\n      return err\n        ? reject(new Error(`Error: unable to update item. ${err}`))\n        : resolve();\n    });\n  });\n}\n\nfunction deleteTaskFromDatabase(id, project) {\n  const params = {\n    TableName: table,\n    Key: {\n      project,\n      id,\n    },\n  };\n\n  return new Promise((resolve, reject) => {\n    docClient.delete(params, (err) => {\n      return err\n        ? reject(new Error(`Error: unable to delete item. ${err}`))\n        : resolve();\n    });\n  });\n}\n\nexport default function TaskModel() {\n  return {\n    getLatestTaskId,\n    addTaskToDatabase,\n    getTasksFromDatabase,\n    updateTaskToDatabase,\n    deleteTaskFromDatabase,\n  };\n}\n","import { useState, useCallback } from \"react\";\nimport TaskModel from \"../Models/TaskModel\";\n\nfunction prioritize(item1, item2) {\n  const priorities = [\"Cosmetic\", \"Low\", \"Medium\", \"High\", \"Showstopper\"];\n  return priorities.indexOf(item1.priority) > priorities.indexOf(item2.priority)\n    ? -1\n    : 1;\n}\n\nexport default function TaskViewModel(\n  resetFieldElements,\n  setFieldElements,\n  setTasks,\n  toggleNotification\n) {\n  const {\n    getLatestTaskId,\n    addTaskToDatabase,\n    getTasksFromDatabase,\n    updateTaskToDatabase,\n    deleteTaskFromDatabase,\n  } = TaskModel();\n\n  // The value of render does not matter;\n  // I just want the effect hook to rerender the tasks in the Dashboard page\n  const [render, setRender] = useState(true);\n\n  const resetTaskForm = () => {\n    setFieldElements(resetFieldElements);\n  };\n\n  const addTask = async (e, fields) => {\n    e.preventDefault();\n\n    const newTask = {};\n    const willReset = fields[fields.length - 1].fieldValue;\n\n    fields.forEach((field) => {\n      Object.assign(newTask, { [field.fieldId]: field.fieldValue });\n    });\n\n    try {\n      const id = await getLatestTaskId();\n      await addTaskToDatabase(id, newTask);\n      toggleNotification(\"Success: added the item!\");\n      if (willReset) {\n        resetTaskForm();\n      }\n    } catch (err) {\n      toggleNotification(err.toString());\n    } finally {\n      setRender(!render);\n    }\n  };\n\n  const getTask = useCallback(() => {\n    const project = localStorage.getItem(\"project\") || \"Whoopsies!\";\n\n    getTasksFromDatabase(project)\n      .then((retrievedTasks) => {\n        const prioritizedTasks = [...retrievedTasks].sort(prioritize);\n\n        setTasks(prioritizedTasks);\n        localStorage.setItem(\"project\", project);\n      })\n      .catch((err) => {\n        toggleNotification(err.toString());\n      });\n  }, [getTasksFromDatabase, setTasks, toggleNotification]);\n\n  const deleteTask = async (id, project) => {\n    try {\n      deleteTaskFromDatabase(id, project);\n      toggleNotification(\"Success: deleted the item!\");\n    } catch (err) {\n      toggleNotification(err.toString());\n    } finally {\n      setRender(!render);\n    }\n  };\n\n  const editTask = async (e, fields) => {\n    e.preventDefault();\n\n    const updatedTask = {};\n    fields.forEach((field) => {\n      Object.assign(updatedTask, { [field.fieldId]: field.fieldValue });\n    });\n\n    try {\n      updateTaskToDatabase(updatedTask);\n      toggleNotification(\"Success: updated the item!\");\n    } catch (err) {\n      toggleNotification(err.toString());\n    } finally {\n      setRender(!render);\n    }\n  };\n\n  const switchProjects = (e) => {\n    localStorage.setItem(\"project\", e.target.innerText);\n    window.location.reload();\n  };\n\n  // Will refactor into a service call later\n  const projectOptions = [\"Whoopsies!\", \"Victory Coin\"];\n\n  return {\n    render,\n    projectOptions,\n    addTask,\n    getTask,\n    deleteTask,\n    editTask,\n    resetTaskForm,\n    switchProjects,\n  };\n}\n","import CardUnstyled from \"@material-ui/core/Card\";\nimport styled from \"styled-components\";\n\nfunction getPriorityColor(props) {\n  switch (props.priority) {\n    case \"Cosmetic\":\n      return \"#E4E4E4\";\n    case \"Low\":\n      return \"#C1E1C1\";\n    case \"Medium\":\n      return \"#FDFD96\";\n    case \"High\":\n      return \"#FFB347\";\n    case \"Showstopper\":\n      return \"#FF6961\";\n    default:\n      return \"#E4E4E4\";\n  }\n}\n\n// The adjust property of the Card component does not accept boolean attributes\n// Thus, strings have to be used and compared here\nconst Card = styled(CardUnstyled)`\n  display: grid;\n  grid-template-columns: 85% 15%;\n  margin: ${({ adjust }) => (adjust === \"true\" ? \"0px\" : \"10px\")} 0px 10px 0px;\n  padding: 10px;\n  background-color: ${(props) => getPriorityColor(props)} !important;\n\n  svg {\n    opacity: 0;\n    float: right;\n    position: relative;\n    top: -3px;\n    right: -8px;\n    transition: 0.5s ease;\n  }\n\n  :hover svg {\n    opacity: 1;\n  }\n`;\n\nexport default function TaskCardStyles() {\n  return { Card };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TaskCardStyles from \"./TaskCardStyles\";\n\nexport default function TaskCard({ priority, children, topMarginAdjust }) {\n  const { Card } = TaskCardStyles();\n\n  return (\n    <Card priority={priority} adjust={topMarginAdjust.toString()}>\n      {children}\n    </Card>\n  );\n}\n\nTaskCard.propTypes = {\n  priority: PropTypes.string,\n  topMarginAdjust: PropTypes.bool,\n  children: PropTypes.arrayOf(PropTypes.element),\n};\n\nTaskCard.defaultProps = {\n  priority: \"Cosmetic\",\n  topMarginAdjust: false,\n  children: [],\n};\n","import styled from \"styled-components\";\n\nconst List = styled.div`\n  border-radius: 4px;\n  background-color: lightgray;\n  padding: 10px;\n  width: 245px;\n\n  svg {\n    float: right;\n    position: relative;\n  }\n`;\n\nexport default function TaskListStyles() {\n  return { List };\n}\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport TaskCard from \"./TaskCard\";\nimport TaskListStyles from \"./TaskListStyles\";\n\nfunction getBriefName(taskName) {\n  const maxWords = 5;\n  const arrayOfWords = taskName.split(\" \");\n  let words = 0;\n  let i = 0;\n\n  // Removes consecutive whitespace characters\n  for (; i < arrayOfWords.length && words < maxWords; i += 1) {\n    if (arrayOfWords[i].length) words += 1;\n  }\n\n  return arrayOfWords.splice(0, i).join(\" \");\n}\n\nexport default function TaskList({ header, tasks, toggleModal }) {\n  const { List } = TaskListStyles();\n  const [open, setOpen] = useState(true);\n  const fullHeader = `${header} (${tasks.length})`;\n\n  return (\n    <List>\n      <b>{fullHeader}</b>\n      {/* Regular list rendering */}\n      {tasks.length <= 5 ? (\n        tasks.map((task) => (\n          <TaskCard\n            key={task.id}\n            priority={task.priority}\n            toggleModal={toggleModal}\n          >\n            <span>{getBriefName(task.name)}</span>\n            <VisibilityIcon onClick={() => toggleModal(task)} />\n          </TaskCard>\n        ))\n      ) : (\n        <>\n          {open ? (\n            <ExpandLess onClick={() => setOpen(!open)} />\n          ) : (\n            <ExpandMore onClick={() => setOpen(!open)} />\n          )}\n          {/* Collapsible list rendering for tasks[0] to tasks[4] */}\n          {tasks.slice(0, 5).map((task, index) => {\n            if (index > 5) {\n              return null;\n            }\n            return (\n              <TaskCard\n                key={task.id}\n                priority={task.priority}\n                toggleModal={toggleModal}\n              >\n                <span>{getBriefName(task.name)}</span>\n                <VisibilityIcon onClick={() => toggleModal(task)} />\n              </TaskCard>\n            );\n          })}\n          <Collapse id=\"collapse\" in={open} timeout=\"auto\" unmountOnExit>\n            {/* Collapsible list rendering for tasks[5] to the end */}\n            {tasks.slice(5).map((task, index) => (\n              <TaskCard\n                key={task.id}\n                priority={task.priority}\n                toggleModal={toggleModal}\n                topMarginAdjust={index === 0}\n              >\n                <span>{getBriefName(task.name)}</span>\n                <VisibilityIcon onClick={() => toggleModal(task)} />\n              </TaskCard>\n            ))}\n          </Collapse>\n        </>\n      )}\n    </List>\n  );\n}\n\nTaskList.propTypes = {\n  header: PropTypes.string,\n  tasks: PropTypes.arrayOf(PropTypes.object),\n  toggleModal: PropTypes.func,\n};\n\nTaskList.defaultProps = {\n  header: \"TITLE NEEDED\",\n  tasks: [],\n  toggleModal: () => {},\n};\n","import React from \"react\";\n\nexport default function WhoopsiesHeader() {\n  return <p>An Issue Tracker for all your Oopsies!</p>;\n}\n","import ModalUnstyled from \"@material-ui/core/Modal\";\nimport styled from \"styled-components\";\n\nconst Modal = styled(ModalUnstyled)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  #modal-container:nth-of-type(3) {\n    border: 4px solid lightgray;\n    border-radius: 4px;\n    background-color: #fff;\n    padding: 20px;\n    width: 50em;\n\n    :focus {\n      outline: none;\n    }\n  }\n\n  #edit {\n    text-decoration: inherit;\n    color: inherit;\n  }\n\n  #delete {\n    cursor: pointer;\n  }\n`;\n\nconst ModalButtons = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport default function TaskModalStyles() {\n  return { Modal, ModalButtons };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport TaskModalStyles from \"./TaskModalStyles\";\n\nconst displayFields = (field, values) => {\n  if ([\"text\", \"text-long\", \"select\"].includes(field.fieldType) && values.id) {\n    return (\n      <p key={field.fieldId}>\n        {`${field.fieldLabel}: ${values[`${field.fieldId}`]}`}\n      </p>\n    );\n  }\n  return null;\n};\n\nexport default function TaskModal(props) {\n  const { open, toggleModal, fields, values, handleEdit, handleDelete } = props;\n  const { Modal, ModalButtons } = TaskModalStyles();\n\n  return (\n    <Modal\n      open={open}\n      onClose={toggleModal}\n      aria-labelledby=\"modal-title\"\n      aria-describedby=\"modal-description\"\n    >\n      <div id=\"modal-container\">\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          <Grid item xs={11}>\n            <h2 id=\"modal-title\">{values.name}</h2>\n          </Grid>\n          <Grid item xs={1}>\n            <Link\n              to=\"/whoopsies/edit-task\"\n              id=\"edit\"\n              onClick={(e) => {\n                handleEdit(values);\n                toggleModal(e);\n              }}\n            >\n              <EditIcon />\n            </Link>\n            <DeleteIcon\n              id=\"delete\"\n              onClick={(e) => {\n                handleDelete(values.id, values.project);\n                toggleModal(e);\n              }}\n            />\n          </Grid>\n        </Grid>\n\n        {fields.map((field) => displayFields(field, values))}\n\n        <ModalButtons>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"button\"\n            size=\"large\"\n            onClick={toggleModal}\n          >\n            Close\n          </Button>\n        </ModalButtons>\n      </div>\n    </Modal>\n  );\n}\n\nTaskModal.propTypes = {\n  open: PropTypes.bool,\n  fields: PropTypes.arrayOf(PropTypes.object),\n  values: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    description: PropTypes.string,\n    status: PropTypes.string,\n    priority: PropTypes.string,\n    sprint: PropTypes.string,\n    project: PropTypes.string,\n    version: PropTypes.string,\n    release: PropTypes.string,\n  }),\n  toggleModal: PropTypes.func,\n  handleEdit: PropTypes.func,\n  handleDelete: PropTypes.func,\n};\n\nTaskModal.defaultProps = {\n  open: false,\n  fields: [],\n  values: {},\n  toggleModal: () => {},\n  handleEdit: () => {},\n  handleDelete: () => {},\n};\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TaskList from \"../UI/TaskList\";\nimport WhoopsiesHeader from \"../UI/WhoopsiesHeader\";\nimport TaskModal from \"../UI/TaskModal\";\n\nexport default function DashboardPageView({\n  viewModel,\n  toggleNotification,\n  tasks,\n  handleDelete,\n}) {\n  const STATUSES = [\n    \"TO DO\",\n    \"IN ANALYSIS\",\n    \"IN DEVELOPMENT\",\n    \"IN TESTING\",\n    \"DONE\",\n  ];\n\n  useEffect(() => {\n    toggleNotification(\"Success: retrieved the tasks!\");\n  }, [toggleNotification]);\n\n  return (\n    <div data-testid=\"dashboard-page-view\">\n      <WhoopsiesHeader />\n      <TaskModal\n        open={viewModel.openModal}\n        toggleModal={viewModel.toggleModal}\n        fields={viewModel.fieldElements}\n        values={viewModel.taskValues}\n        handleEdit={viewModel.saveTaskToLocalStorage}\n        handleDelete={handleDelete}\n      />\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-around\"\n        alignItems=\"flex-start\"\n        spacing={2}\n      >\n        {STATUSES.map((status) => {\n          const tasksOrganizedByStatus = tasks.filter(\n            (task) => status === task.status\n          );\n          return (\n            <Grid key={status} item>\n              <TaskList\n                header={status}\n                tasks={tasksOrganizedByStatus}\n                toggleModal={viewModel.toggleModal}\n              />\n            </Grid>\n          );\n        })}\n      </Grid>\n    </div>\n  );\n}\n\nDashboardPageView.propTypes = {\n  viewModel: PropTypes.shape({\n    fieldElements: PropTypes.arrayOf(PropTypes.object),\n    openModal: PropTypes.bool,\n    taskValues: PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      description: PropTypes.string,\n      status: PropTypes.string,\n      priority: PropTypes.string,\n      sprint: PropTypes.string,\n      version: PropTypes.string,\n      release: PropTypes.string,\n    }),\n    toggleModal: PropTypes.func,\n    saveTaskToLocalStorage: PropTypes.func,\n  }),\n  tasks: PropTypes.arrayOf(PropTypes.object),\n  toggleNotification: PropTypes.func,\n  handleDelete: PropTypes.func,\n};\n\nDashboardPageView.defaultProps = {\n  viewModel: {\n    fieldElements: [],\n    openModal: false,\n    taskValues: {},\n    toggleModal: () => {},\n    saveTaskToLocalStorage: () => {},\n  },\n  tasks: [],\n  toggleNotification: () => {},\n  handleDelete: () => {},\n};\n","import { useState } from \"react\";\nimport TaskFormFields from \"../FormFields/TaskFormFields\";\n\nexport default function useTaskCreation() {\n  const { formLabel1, formLabel2 } = TaskFormFields();\n  const [fieldElements, setFieldElements] = useState(TaskFormFields().fields);\n  const [tasks, setTasks] = useState([]);\n\n  return {\n    formLabel1,\n    formLabel2,\n    resetFieldElements: TaskFormFields().fields,\n    fieldElements,\n    tasks,\n    setFieldElements,\n    setTasks,\n  };\n}\n","export default function TaskFormFields() {\n  return {\n    formLabel1: \"Task Creation\",\n    formLabel2: \"Task Update\",\n    fields: [\n      {\n        fieldId: \"id\",\n        fieldLabel: \"Task ID\",\n        fieldType: \"\",\n        fieldValue: null,\n      },\n      {\n        fieldId: \"name\",\n        fieldLabel: \"Task Name\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"status\",\n        fieldLabel: \"Status\",\n        fieldType: \"select\",\n        fieldOptions: [\n          \"TO DO\",\n          \"IN ANALYSIS\",\n          \"IN DEVELOPMENT\",\n          \"IN TESTING\",\n          \"DONE\",\n        ],\n        fieldValue: \"TO DO\",\n      },\n      {\n        fieldId: \"priority\",\n        fieldLabel: \"Priority\",\n        fieldType: \"select\",\n        fieldOptions: [\"Cosmetic\", \"Low\", \"Medium\", \"High\", \"Showstopper\"],\n        fieldValue: \"Cosmetic\",\n      },\n      {\n        fieldId: \"sprint\",\n        fieldLabel: \"Sprint\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"project\",\n        fieldLabel: \"Project Name\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"version\",\n        fieldLabel: \"Project Version\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"release\",\n        fieldLabel: \"Release Date\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"description\",\n        fieldLabel: \"Task Description\",\n        fieldType: \"text-long\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"submit\",\n        fieldLabel1: \"Create\",\n        fieldLabel2: \"Update\",\n        fieldType: \"button\",\n        fieldValue: null,\n      },\n      {\n        fieldId: \"reset\",\n        fieldLabel: \"Reset the form after creating this task\",\n        fieldType: \"checkbox\",\n        fieldValue: true,\n      },\n    ],\n  };\n}\n","import useTaskCreation from \"../CustomHooks/useTaskCreation\";\nimport useModal from \"../CustomHooks/useModal\";\n\nexport default function DashboardPageViewModel() {\n  const { fieldElements } = useTaskCreation();\n  const { openModal, taskValues, toggleModal } = useModal();\n\n  const saveTaskToLocalStorage = (values) => {\n    localStorage.setItem(\"task\", JSON.stringify(values));\n  };\n\n  return {\n    fieldElements,\n    openModal,\n    taskValues,\n    toggleModal,\n    saveTaskToLocalStorage,\n  };\n}\n","import { useState } from \"react\";\n\nconst CLICK_EVENT = \"click\";\n\nexport default function useModal() {\n  const [openModal, setOpenModal] = useState(false);\n  const [taskValues, setTaskValues] = useState({});\n\n  const toggleModal = (task) => {\n    setTaskValues(task.type === CLICK_EVENT ? {} : task);\n    setOpenModal(!openModal);\n  };\n\n  return {\n    openModal,\n    taskValues,\n    toggleModal,\n  };\n}\n","import { createContext } from \"react\";\n\nconst FormContext = createContext(null);\nexport default FormContext;\n","import TextFieldUnstyled from \"@material-ui/core/TextField\";\nimport FormControlLabelUnstyled from \"@material-ui/core/FormControlLabel\";\nimport styled from \"styled-components\";\n\nconst TextField = styled(TextFieldUnstyled)`\n  width: ${({ label }) => ([\"Sprint\"].includes(label) ? \"5em\" : \"10em\")};\n  margin: 0 10px 10px 0 !important;\n`;\n\nconst FormControlLabel = styled(FormControlLabelUnstyled)`\n  margin-left: 0px !important;\n`;\n\nexport default function TaskFormStyles() {\n  return { TextField, FormControlLabel };\n}\n","import React, { useContext } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@material-ui/core/Button\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormContext from \"../Providers/FormContext\";\nimport TaskFormStyles from \"./TaskFormStyles\";\n\nexport default function TaskForm({ fields, handleChange }) {\n  const { TextField, FormControlLabel } = TaskFormStyles();\n  const { pathname } = useLocation();\n  const onCreateTaskPage = pathname.includes(\"create-task\");\n\n  const handleSubmit = useContext(FormContext);\n\n  const displayFields = (field) => {\n    switch (field.fieldType) {\n      case \"text\":\n        return (\n          <TextField\n            key={field.fieldId}\n            label={field.fieldLabel}\n            value={field.fieldValue}\n            size=\"small\"\n            variant=\"outlined\"\n            onChange={(event) => handleChange(field.fieldId, event)}\n          />\n        );\n      case \"text-long\":\n        return (\n          <TextField\n            key={field.fieldId}\n            label={field.fieldLabel}\n            value={field.fieldValue}\n            multiline\n            fullWidth\n            rows={5}\n            size=\"small\"\n            variant=\"outlined\"\n            onChange={(event) => handleChange(field.fieldId, event)}\n          />\n        );\n      case \"select\":\n        return (\n          <TextField\n            key={field.fieldId}\n            label={field.fieldLabel}\n            value={field.fieldValue}\n            select\n            size=\"small\"\n            variant=\"outlined\"\n            onChange={(event) => handleChange(field.fieldId, event)}\n          >\n            {field.fieldOptions.map((option) => (\n              <MenuItem key={option} value={option}>\n                {option}\n              </MenuItem>\n            ))}\n          </TextField>\n        );\n      case \"button\":\n        return (\n          <Button\n            key={field.fieldId}\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            size=\"large\"\n            disabled={fields[1].fieldValue === \"\"}\n          >\n            {onCreateTaskPage ? field.fieldLabel1 : field.fieldLabel2}\n          </Button>\n        );\n      case \"checkbox\":\n        return onCreateTaskPage ? (\n          <FormControlLabel\n            key={field.fieldId}\n            label={field.fieldLabel}\n            control={\n              // eslint-disable-next-line react/jsx-wrap-multilines\n              <Checkbox\n                checked={field.fieldValue}\n                onChange={(event) => handleChange(field.fieldId, event)}\n                color=\"primary\"\n              />\n            }\n          />\n        ) : null;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e, fields)}>\n      {fields.map(displayFields)}\n    </form>\n  );\n}\n\nTaskForm.propTypes = {\n  fields: PropTypes.arrayOf(PropTypes.object),\n  handleChange: PropTypes.func,\n};\n\nTaskForm.defaultProps = {\n  fields: [],\n  handleChange: () => {},\n};\n","import React, { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport TaskForm from \"../UI/TaskForm\";\nimport WhoopsiesHeader from \"../UI/WhoopsiesHeader\";\n\nexport default function TaskFormPageView({ formLabel, viewModel }) {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    const onCreateTaskPage = pathname.includes(\"create-task\");\n    if (!onCreateTaskPage && localStorage.length !== 0) {\n      viewModel.hydrateTaskFromLocalStorage();\n    }\n  });\n\n  return (\n    <div data-testid=\"task-creation-page-view\">\n      <WhoopsiesHeader />\n      <h2>{formLabel}</h2>\n      <TaskForm\n        fields={viewModel.fieldElements}\n        handleChange={viewModel.handleChange}\n      />\n    </div>\n  );\n}\n\nTaskFormPageView.propTypes = {\n  formLabel: PropTypes.string,\n  viewModel: PropTypes.shape({\n    fieldElements: PropTypes.arrayOf(PropTypes.object),\n    handleChange: PropTypes.func,\n    hydrateTaskFromLocalStorage: PropTypes.func,\n  }),\n};\n\nTaskFormPageView.defaultProps = {\n  formLabel: \"\",\n  viewModel: {\n    fieldElements: [],\n    handleChange: () => {},\n    hydrateTaskFromLocalStorage: () => {},\n  },\n};\n","export default function TaskFormPageViewModel(fieldElements, setFieldElements) {\n  const handleChange = (id, event) => {\n    const newElements = [...fieldElements];\n    const fieldIndexToUpdate = newElements.findIndex(\n      (field) => id === field.fieldId\n    );\n\n    if (id === \"reset\") {\n      newElements[fieldIndexToUpdate].fieldValue = event.target.checked;\n    } else {\n      newElements[fieldIndexToUpdate].fieldValue = event.target.value;\n    }\n    setFieldElements(newElements);\n  };\n\n  const hydrateTaskFromLocalStorage = () => {\n    const hydratedTask = [...fieldElements];\n    const storedTask = JSON.parse(localStorage.getItem(\"task\"));\n\n    if (storedTask === null) {\n      return;\n    }\n\n    hydratedTask.forEach((field, index) => {\n      Object.assign(hydratedTask[index], {\n        fieldValue: storedTask[field.fieldId],\n      });\n    });\n\n    localStorage.removeItem(\"task\");\n    setFieldElements(hydratedTask);\n  };\n\n  return {\n    fieldElements,\n    handleChange,\n    hydrateTaskFromLocalStorage,\n  };\n}\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function InDevelopmentPage({ toggleNotification }) {\n  useEffect(() => {\n    toggleNotification(\"Info: sorry this page does not exist... yet!\");\n  }, [toggleNotification]);\n\n  return (\n    <div data-testid=\"in-development-page-view\">\n      <h1>Whoopsies! Looks like you made an oopsy!</h1>\n      <p> This page does not exist yet. Sorry about that! 😅</p>\n    </div>\n  );\n}\n\nInDevelopmentPage.propTypes = {\n  toggleNotification: PropTypes.func,\n};\n\nInDevelopmentPage.defaultProps = {\n  toggleNotification: () => {},\n};\n","import { createContext } from \"react\";\n\nconst ThemeContext = createContext(null);\nexport default ThemeContext;\n","import AppBarUnstyled from \"@material-ui/core/AppBar\";\nimport SearchIconUnstyled from \"@material-ui/icons/Search\";\nimport InputBaseUnstyled from \"@material-ui/core/InputBase\";\nimport ButtonUnstyled from \"@material-ui/core/Button\";\nimport styled from \"styled-components\";\n\nconst SEARCH_BOX_WIDTH = 20;\nconst INPUT_BASE_LEFT_MARGIN = 2;\n\nconst AppBar = styled(AppBarUnstyled)`\n  display: block !important;\n  padding: 0.5em 0 0.5em\n    ${({ sidebarwidth }) => (sidebarwidth + 0.5).toString()}em;\n`;\n\nconst SearchBox = styled.div`\n  display: inline-block;\n  background-color: #5c6bc0;\n  &:hover {\n    background-color: #6f7dc8;\n  }\n  border-radius: 7px;\n  width: ${SEARCH_BOX_WIDTH.toString()}em;\n`;\n\nconst SearchIcon = styled(SearchIconUnstyled)`\n  position: absolute;\n  margin: 3px;\n`;\n\nconst InputBase = styled(InputBaseUnstyled)`\n  margin-left: ${INPUT_BASE_LEFT_MARGIN.toString()}em;\n  width: ${(SEARCH_BOX_WIDTH - INPUT_BASE_LEFT_MARGIN).toString()}em;\n`;\n\nconst Button = styled(ButtonUnstyled)`\n  margin: 0 1em !important;\n  background-color: white !important;\n\n  a {\n    text-decoration: inherit;\n    color: inherit;\n  }\n`;\n\nexport default function NavBarStyles() {\n  return { AppBar, SearchBox, SearchIcon, InputBase, Button };\n}\n","import React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Assignment from \"@material-ui/icons/Assignment\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport ThemeContext from \"../Providers/ThemeContext\";\nimport NavBarStyles from \"./NavBarStyles\";\n\nexport default function NavBar({ projectOptions, handleSearch }) {\n  const { AppBar, SearchBox, SearchIcon, InputBase, Button } = NavBarStyles();\n  const theme = useContext(ThemeContext);\n\n  return (\n    <AppBar sidebarwidth={theme.SIDEBAR_WIDTH}>\n      <b>Whoopsies!</b>\n      <Button variant=\"outlined\" color=\"primary\" startIcon={<Assignment />}>\n        <a\n          href=\"https://docs.google.com/document/d/1FgaHyxg0d-MKl4OlfG0u36fmp6jM5nZxvI3ZeXUq4vs/edit?usp=sharing\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          SRS\n        </a>\n      </Button>\n      <SearchBox>\n        <SearchIcon />\n        <Autocomplete\n          id=\"project-autocomplete\"\n          options={projectOptions}\n          onClose={(e) => handleSearch(e)}\n          renderInput={(params) => (\n            <div ref={params.InputProps.ref}>\n              <InputBase\n                // eslint-disable-next-line react/jsx-props-no-spreading\n                {...params.inputProps}\n                size=\"small\"\n                variant=\"outlined\"\n                placeholder=\"Search by project\"\n              />\n            </div>\n          )}\n        />\n      </SearchBox>\n    </AppBar>\n  );\n}\n\nNavBar.propTypes = {\n  projectOptions: PropTypes.arrayOf(PropTypes.string),\n  handleSearch: PropTypes.func,\n};\nNavBar.defaultProps = {\n  projectOptions: [],\n  handleSearch: () => {},\n};\n","import DrawerUnstyled from \"@material-ui/core/Drawer\";\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\nimport QueueIcon from \"@material-ui/icons/Queue\";\nimport HelpIcon from \"@material-ui/icons/Help\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport styled, { css } from \"styled-components\";\n\nconst Drawer = styled(DrawerUnstyled)`\n  * {\n    text-decoration: inherit;\n    color: inherit;\n    cursor: auto;\n  }\n`;\n\nconst iconStyles = css`\n  vertical-align: top;\n  font-size: 1.1rem !important;\n  margin-right: 8px;\n`;\n\nconst DashboardIcon = styled(ListAltIcon)`\n  ${iconStyles}\n`;\n\nconst CreateTaskIcon = styled(QueueIcon)`\n  ${iconStyles}\n`;\n\nconst GeneralQuestionsIcon = styled(HelpIcon)`\n  ${iconStyles}\n`;\n\nconst LogoutIcon = styled(ExitToAppIcon)`\n  ${iconStyles}\n  transform: scaleX(-1);\n`;\n\nexport default function SidebarStyles() {\n  return {\n    Drawer,\n    DashboardIcon,\n    CreateTaskIcon,\n    GeneralQuestionsIcon,\n    LogoutIcon,\n  };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport SidebarStyles from \"./SidebarStyles\";\n\nexport default function Sidebar({ resetTaskForm }) {\n  const {\n    Drawer,\n    DashboardIcon,\n    CreateTaskIcon,\n    GeneralQuestionsIcon,\n    LogoutIcon,\n  } = SidebarStyles();\n\n  return (\n    <Drawer variant=\"permanent\">\n      <List>\n        <Link to=\"/whoopsies/dashboard\">\n          <ListItem button>\n            <DashboardIcon />\n            Dashboard\n          </ListItem>\n        </Link>\n        <Link to=\"/whoopsies/create-task\" onClick={() => resetTaskForm()}>\n          <ListItem button>\n            <CreateTaskIcon />\n            Create Task\n          </ListItem>\n        </Link>\n        <Link to=\"/whoopsies/general-questions\">\n          <ListItem button>\n            <GeneralQuestionsIcon />\n            General Questions\n          </ListItem>\n        </Link>\n        <Link to=\"/whoopsies/\">\n          <ListItem button>\n            <LogoutIcon />\n            Logout\n          </ListItem>\n        </Link>\n      </List>\n    </Drawer>\n  );\n}\n\nSidebar.propTypes = {\n  resetTaskForm: PropTypes.func,\n};\n\nSidebar.defaultProps = {\n  resetTaskForm: () => {},\n};\n","import AlertUnstyled from \"@material-ui/lab/Alert\";\nimport styled from \"styled-components\";\n\nconst Alert = styled(AlertUnstyled)`\n  position: absolute;\n  top: ${(props) => (props.show ? \"4.5em\" : \"0em\")};\n  right: 1em;\n  z-index: 999;\n  transition: top 1s ease !important;\n`;\n\nexport default function NotificationStyles() {\n  return { Alert };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport NotificationStyles from \"./NotificationStyles\";\n\nexport default function Notification({ text, show }) {\n  const { Alert } = NotificationStyles();\n  const severity = text.substr(0, text.indexOf(\":\")).toLowerCase() || \"error\";\n\n  return (\n    <Alert show={show ? \"true\" : undefined} severity={severity}>\n      {text}\n    </Alert>\n  );\n}\n\nNotification.propTypes = {\n  text: PropTypes.string,\n  show: PropTypes.bool,\n};\n\nNotification.defaultProps = {\n  text: \"Success\",\n  show: false,\n};\n","import styled from \"styled-components\";\n\nconst NAVBAR_HEIGHT = 4;\nconst SIDEBAR_WIDTH = 12;\n\nconst theme = {\n  NAVBAR_HEIGHT,\n  SIDEBAR_WIDTH,\n};\n\nconst Content = styled.main`\n  margin: ${NAVBAR_HEIGHT.toString()}em 0 0 ${SIDEBAR_WIDTH.toString()}em;\n`;\n\nexport default function AppStyles() {\n  return { theme, Content };\n}\n","import { useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport TaskViewModel from \"./components/ViewModels/TaskViewModel\";\nimport DashboardPageView from \"./components/Views/DashboardPageView\";\nimport DashboardPageViewModel from \"./components/ViewModels/DashboardPageViewModel\";\nimport TaskFormPageView from \"./components/Views/TaskFormPageView\";\nimport TaskFormPageViewModel from \"./components/ViewModels/TaskFormPageViewModel\";\nimport InDevelopmentPageView from \"./components/Views/InDevelopmentPageView\";\nimport useNotifications from \"./components/CustomHooks/useNotifications\";\nimport useTaskCreation from \"./components/CustomHooks/useTaskCreation\";\nimport FormContext from \"./components/Providers/FormContext\";\nimport ThemeContext from \"./components/Providers/ThemeContext\";\nimport NavBar from \"./components/UI/NavBar\";\nimport Sidebar from \"./components/UI/Sidebar\";\nimport Notification from \"./components/UI/Notification\";\nimport AppStyles from \"./AppStyles\";\n\nfunction App() {\n  const { theme, Content } = AppStyles();\n\n  const {\n    showNotification,\n    notificationText,\n    toggleNotification,\n  } = useNotifications();\n\n  const {\n    formLabel1,\n    formLabel2,\n    resetFieldElements,\n    fieldElements,\n    tasks,\n    setFieldElements,\n    setTasks,\n  } = useTaskCreation();\n\n  const {\n    render,\n    projectOptions,\n    addTask,\n    getTask,\n    deleteTask,\n    editTask,\n    resetTaskForm,\n    switchProjects,\n  } = TaskViewModel(\n    resetFieldElements,\n    setFieldElements,\n    setTasks,\n    toggleNotification\n  );\n\n  useEffect(() => {\n    getTask();\n  }, [render, getTask]);\n\n  return (\n    <Router basename=\"/\" data-testid=\"app\">\n      <ThemeContext.Provider value={theme}>\n        <NavBar projectOptions={projectOptions} handleSearch={switchProjects} />\n        <Sidebar resetTaskForm={resetTaskForm} />\n        <Content>\n          <Notification show={showNotification} text={notificationText} />\n          <Switch>\n            <Route path=\"/whoopsies/dashboard\">\n              <DashboardPageView\n                viewModel={DashboardPageViewModel()}\n                toggleNotification={toggleNotification}\n                tasks={tasks}\n                handleDelete={deleteTask}\n              />\n            </Route>\n            <Route path=\"/whoopsies/create-task\">\n              <FormContext.Provider value={addTask}>\n                <TaskFormPageView\n                  formLabel={formLabel1}\n                  viewModel={TaskFormPageViewModel(\n                    fieldElements,\n                    setFieldElements\n                  )}\n                />\n              </FormContext.Provider>\n            </Route>\n            <Route path=\"/whoopsies/edit-task\">\n              <FormContext.Provider value={editTask}>\n                <TaskFormPageView\n                  formLabel={formLabel2}\n                  viewModel={TaskFormPageViewModel(\n                    fieldElements,\n                    setFieldElements\n                  )}\n                />\n              </FormContext.Provider>\n            </Route>\n            <Route path=\"*\">\n              <InDevelopmentPageView toggleNotification={toggleNotification} />\n            </Route>\n          </Switch>\n        </Content>\n      </ThemeContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","import { useState, useCallback } from \"react\";\n\nexport default function useNotifications() {\n  const [showNotification, setShowNotification] = useState(false);\n  const [notificationText, setNotificationText] = useState(\"\");\n\n  const toggleNotification = useCallback(\n    (message) => {\n      setNotificationText(message);\n      setShowNotification(true);\n      setTimeout(() => {\n        setShowNotification(false);\n      }, 5000);\n    },\n    [setShowNotification, setNotificationText]\n  );\n\n  return {\n    showNotification,\n    notificationText,\n    toggleNotification,\n  };\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport indexStyles from \"./indexStyles\";\n\nconst GlobalStyles = indexStyles();\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createGlobalStyle } from \"styled-components\";\n\nexport default function GlobalStyle() {\n  return createGlobalStyle`\n    * {\n      font-family: 'PT Sans', sans-serif;\n    }\n  `;\n}\n"],"sourceRoot":""}