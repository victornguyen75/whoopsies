{"version":3,"sources":["components/Providers/FormContext.js","components/UI/TaskFormStyles.js","components/UI/TaskForm.js","components/UI/NotificationStyles.js","components/UI/Notification.js","components/UI/WhoopsiesHeader.js","components/Views/TaskCreationPageView.js","components/Models/TaskModel.js","components/ViewModels/CustomHooks/useTaskCreation.js","components/ViewModels/TaskFormFields.js","components/ViewModels/CustomHooks/useNotifications.js","components/ViewModels/TaskCreationPageViewModel.js","components/UI/TaskCardStyles.js","components/UI/TaskCard.js","components/UI/TaskListStyles.js","components/UI/TaskList.js","components/Views/DashboardPageViewStyles.js","components/Views/DashboardPageView.js","components/ViewModels/DashboardPageViewModel.js","components/UI/SidebarStyles.js","components/UI/Sidebar.js","AppStyles.js","App.js","reportWebVitals.js","index.js","indexStyles.js"],"names":["FormContext","createContext","TextField","styled","TextFieldUnstyled","FormControlLabel","FormControlLabelUnstyled","TaskForm","fields","handleSubmit","handleChange","useContext","onSubmit","e","map","field","fieldType","label","fieldLabel","value","fieldValue","size","variant","onChange","event","fieldId","multiline","fullWidth","rows","select","fieldOptions","option","MenuItem","Button","color","type","control","Checkbox","checked","defaultProps","Alert","AlertUnstyled","props","show","Notification","text","severity","includes","undefined","WhoopsiesHeader","startIcon","href","target","rel","TaskCreationPageView","viewModel","data-testid","formLabel","showNotification","notificationText","Provider","fieldElements","AWS","config","update","accessKeyId","process","REACT_APP_AWS_ACCESS_KEY_ID","secretAccessKey","REACT_APP_AWS_SECRET_ACCESS_KEY","region","endpoint","docClient","DynamoDB","DocumentClient","table","getLatestTaskId","params","TableName","Promise","resolve","reject","scan","err","data","Error","Count","addTaskToDatabase","id","newTask","name","description","status","priority","sprint","version","release","dateCreated","dayjs","format","Item","project","dateUpdated","put","getTasksFromDatabase","Items","TaskModel","useTaskCreation","useState","setFieldElements","tasks","setTasks","useNotifications","setShowNotification","setNotificationText","toggleNotification","useCallback","message","setTimeout","TaskCreationPageViewModel","preventDefault","forEach","Object","assign","then","catch","toString","newElements","fieldIndexToUpdate","findIndex","Card","CardUnstyled","getBriefName","taskName","arrayOfWords","split","words","i","length","splice","join","TaskCard","List","div","TaskList","header","fullHeader","task","Grid","GridUnstyled","DashboardPageView","displayLists","tasksOrganizedByStatus","filter","item","container","direction","justify","alignItems","spacing","prioritize","item1","item2","priorities","indexOf","DashboardPageViewModel","useEffect","retrievedTasks","prioritizedTasks","sort","Drawer","DrawerUnstyled","iconStyles","css","DashboardIcon","ListAltIcon","CreateTaskIcon","QueueIcon","Sidebar","ListItem","button","to","Content","main","App","basename","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyles","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14aec163.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst FormContext = createContext(null);\nexport default FormContext;\n","import TextFieldUnstyled from \"@material-ui/core/TextField\";\nimport FormControlLabelUnstyled from \"@material-ui/core/FormControlLabel\";\nimport styled from \"styled-components\";\n\nconst TextField = styled(TextFieldUnstyled)`\n  margin: 0 10px 10px 0 !important;\n`;\n\nconst FormControlLabel = styled(FormControlLabelUnstyled)`\n  margin-left: 0px !important;\n`;\n\nexport default function TaskFormStyles() {\n  return { TextField, FormControlLabel };\n}\n","import React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@material-ui/core/Button\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormContext from \"../Providers/FormContext\";\nimport TaskFormStyles from \"./TaskFormStyles\";\n\nexport default function TaskForm({ fields, handleSubmit }) {\n  const { TextField, FormControlLabel } = TaskFormStyles();\n\n  const handleChange = useContext(FormContext);\n\n  const displayFields = (field) => {\n    switch (field.fieldType) {\n      case \"text\":\n        return (\n          <TextField\n            key={field.fieldId}\n            label={field.fieldLabel}\n            value={field.fieldValue}\n            size=\"small\"\n            variant=\"outlined\"\n            onChange={(event) => handleChange(field.fieldId, event)}\n          />\n        );\n      case \"text-long\":\n        return (\n          <TextField\n            key={field.fieldId}\n            label={field.fieldLabel}\n            value={field.fieldValue}\n            multiline\n            fullWidth\n            rows={5}\n            size=\"small\"\n            variant=\"outlined\"\n            onChange={(event) => handleChange(field.fieldId, event)}\n          />\n        );\n      case \"select\":\n        return (\n          <TextField\n            key={field.fieldId}\n            label={field.fieldLabel}\n            value={field.fieldValue}\n            select\n            size=\"small\"\n            variant=\"outlined\"\n            onChange={(event) => handleChange(field.fieldId, event)}\n          >\n            {field.fieldOptions.map((option) => (\n              <MenuItem key={option} value={option}>\n                {option}\n              </MenuItem>\n            ))}\n          </TextField>\n        );\n      case \"button\":\n        return (\n          <Button\n            key={field.fieldId}\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            size=\"large\"\n          >\n            {field.fieldLabel}\n          </Button>\n        );\n      case \"checkbox\":\n        return (\n          <FormControlLabel\n            key={field.fieldId}\n            label={field.fieldLabel}\n            control={\n              // eslint-disable-next-line react/jsx-wrap-multilines\n              <Checkbox\n                checked={field.fieldValue}\n                onChange={(event) => handleChange(field.fieldId, event)}\n                color=\"primary\"\n              />\n            }\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>{fields.map(displayFields)}</form>\n  );\n}\n\nTaskForm.propTypes = {\n  fields: PropTypes.arrayOf(PropTypes.object),\n  handleSubmit: PropTypes.func,\n};\n\nTaskForm.defaultProps = {\n  fields: [],\n  handleSubmit: () => {},\n};\n","import AlertUnstyled from \"@material-ui/lab/Alert\";\nimport styled from \"styled-components\";\n\nconst Alert = styled(AlertUnstyled)`\n  position: absolute;\n  top: ${(props) => (props.show ? \"1em\" : \"-10em\")};\n  right: 1em;\n  z-index: 999;\n  transition: top 1s ease !important;\n`;\n\nexport default function NotificationStyles() {\n  return {\n    Alert,\n  };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport NotificationStyles from \"./NotificationStyles\";\n\nexport default function Notification({ text, show }) {\n  const { Alert } = NotificationStyles();\n  const severity = text.includes(\"Success\") ? \"success\" : \"error\";\n\n  return (\n    <Alert show={show ? \"true\" : undefined} severity={severity}>\n      {text}\n    </Alert>\n  );\n}\n\nNotification.propTypes = {\n  text: PropTypes.string,\n  show: PropTypes.bool,\n};\n\nNotification.defaultProps = {\n  text: \"\",\n  show: false,\n};\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Assignment from \"@material-ui/icons/Assignment\";\n\nexport default function WhoopsiesHeader() {\n  return (\n    <>\n      <h1>Whoopsies!</h1>\n      <p>\n        {\"An Issue Tracker for all your Oopsies! \"}\n        <Button variant=\"outlined\" color=\"primary\" startIcon={<Assignment />}>\n          <a\n            href=\"https://docs.google.com/document/d/1FgaHyxg0d-MKl4OlfG0u36fmp6jM5nZxvI3ZeXUq4vs/edit?usp=sharing\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            SRS\n          </a>\n        </Button>\n      </p>\n    </>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport FormContext from \"../Providers/FormContext\";\nimport TaskForm from \"../UI/TaskForm\";\nimport Notification from \"../UI/Notification\";\nimport WhoopsiesHeader from \"../UI/WhoopsiesHeader\";\n\nexport default function TaskCreationPageView({ viewModel }) {\n  return (\n    <div data-testid=\"task-creation-page-view\">\n      <WhoopsiesHeader />\n      <h2>{viewModel.formLabel}</h2>\n      <Notification\n        show={viewModel.showNotification}\n        text={viewModel.notificationText}\n      />\n      <FormContext.Provider value={viewModel.handleChange}>\n        <TaskForm\n          fields={viewModel.fieldElements}\n          handleSubmit={viewModel.handleSubmit}\n        />\n      </FormContext.Provider>\n    </div>\n  );\n}\n\nTaskCreationPageView.propTypes = {\n  viewModel: PropTypes.shape({\n    formLabel: PropTypes.string,\n    fieldElements: PropTypes.arrayOf(PropTypes.object),\n    showNotification: PropTypes.bool,\n    notificationText: PropTypes.string,\n    handleSubmit: PropTypes.func,\n    handleChange: PropTypes.func,\n  }),\n};\n\nTaskCreationPageView.defaultProps = {\n  viewModel: {\n    formLabel: \"\",\n    fieldElements: [],\n    showNotification: false,\n    notificationText: \"\",\n    handleSubmit: () => {},\n    handleChange: () => {},\n  },\n};\n","import AWS from \"aws-sdk\";\nimport dayjs from \"dayjs\";\n\nAWS.config.update({\n  accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY_ID,\n  secretAccessKey: process.env.REACT_APP_AWS_SECRET_ACCESS_KEY,\n  region: \"us-east-2\",\n  endpoint: \"https://dynamodb.us-east-2.amazonaws.com\",\n});\n\nconst docClient = new AWS.DynamoDB.DocumentClient();\nconst table = \"Oopsies\";\nconst project = \"Whoopsies!\";\n\nfunction getLatestTaskId() {\n  const params = {\n    TableName: table,\n  };\n\n  return new Promise((resolve, reject) => {\n    docClient.scan(params, (err, data) => {\n      return err\n        ? reject(new Error(`Unable to scan table. ${err}`))\n        : resolve(data.Count + 1);\n    });\n  });\n}\n\nfunction addTaskToDatabase(id, newTask) {\n  const {\n    name,\n    description,\n    status,\n    priority,\n    sprint,\n    version,\n    release,\n  } = newTask;\n  const dateCreated = dayjs().format();\n\n  const params = {\n    TableName: table,\n    Item: {\n      project,\n      id,\n      name,\n      description,\n      status,\n      priority,\n      sprint,\n      version,\n      release,\n      dateCreated,\n      dateUpdated: dateCreated,\n    },\n  };\n\n  return new Promise((resolve, reject) => {\n    docClient.put(params, (err) => {\n      return err ? reject(new Error(`Unable to add item. ${err}`)) : resolve();\n    });\n  });\n}\n\nfunction getTasksFromDatabase() {\n  const params = {\n    TableName: table,\n  };\n\n  return new Promise((resolve, reject) => {\n    docClient.scan(params, (err, data) => {\n      return err\n        ? reject(new Error(`Unable to scan table. ${err}`))\n        : resolve(data.Items);\n    });\n  });\n}\n\nexport default function TaskModel() {\n  return { getLatestTaskId, addTaskToDatabase, getTasksFromDatabase };\n}\n","import { useState } from \"react\";\nimport TaskFormFields from \"../TaskFormFields\";\n\nexport default function useTaskCreation() {\n  const { formLabel } = TaskFormFields();\n  const [fieldElements, setFieldElements] = useState(TaskFormFields().fields);\n  const [tasks, setTasks] = useState([]);\n\n  return {\n    formLabel,\n    fieldElements,\n    tasks,\n    setFieldElements,\n    setTasks,\n  };\n}\n","export default function TaskFormFields() {\n  return {\n    formLabel: \"Task Creation Form\",\n    fields: [\n      {\n        fieldId: \"name\",\n        fieldLabel: \"Task Name\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"status\",\n        fieldLabel: \"Status\",\n        fieldType: \"select\",\n        fieldOptions: [\n          \"TO DO\",\n          \"IN ANALYSIS\",\n          \"IN DEVELOPMENT\",\n          \"IN TESTING\",\n          \"DONE\",\n        ],\n        fieldValue: \"TO DO\",\n      },\n      {\n        fieldId: \"priority\",\n        fieldLabel: \"Priority\",\n        fieldType: \"select\",\n        fieldOptions: [\"Cosmetic\", \"Low\", \"Medium\", \"High\", \"Showstopper\"],\n        fieldValue: \"Cosmetic\",\n      },\n      {\n        fieldId: \"sprint\",\n        fieldLabel: \"Sprint\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"version\",\n        fieldLabel: \"Project Version\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"release\",\n        fieldLabel: \"Release Date\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"description\",\n        fieldLabel: \"Task Description\",\n        fieldType: \"text-long\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"create\",\n        fieldLabel: \"Create\",\n        fieldType: \"button\",\n        fieldValue: null,\n      },\n      {\n        fieldId: \"reset\",\n        fieldLabel: \"Reset the form after creating this task\",\n        fieldType: \"checkbox\",\n        fieldValue: true,\n      },\n    ],\n  };\n}\n","import { useState, useCallback } from \"react\";\n\nexport default function useNotifications() {\n  const [showNotification, setShowNotification] = useState(false);\n  const [notificationText, setNotificationText] = useState(\"\");\n\n  const toggleNotification = useCallback(\n    (message) => {\n      setNotificationText(message);\n      setShowNotification(true);\n      setTimeout(() => {\n        setShowNotification(false);\n      }, 5000);\n    },\n    [setShowNotification, setNotificationText]\n  );\n\n  return {\n    showNotification,\n    notificationText,\n    toggleNotification,\n  };\n}\n","import TaskModel from \"../Models/TaskModel\";\nimport useTaskCreation from \"./CustomHooks/useTaskCreation\";\nimport useNotifications from \"./CustomHooks/useNotifications\";\n\nexport default function TaskCreationPageViewModel() {\n  const { getLatestTaskId, addTaskToDatabase } = TaskModel();\n  const { formLabel, fieldElements, setFieldElements } = useTaskCreation();\n  const {\n    showNotification,\n    notificationText,\n    toggleNotification,\n  } = useNotifications();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const newTask = {};\n\n    fieldElements.forEach((field) => {\n      Object.assign(newTask, { [field.fieldId]: field.fieldValue });\n    });\n\n    getLatestTaskId()\n      .then((id) => addTaskToDatabase(id, newTask))\n      .then(() => {\n        toggleNotification(\"Successfully added the item!\");\n      })\n      .catch((err) => {\n        toggleNotification(err.toString());\n      });\n  };\n\n  const handleChange = (id, event) => {\n    const newElements = [...fieldElements];\n    const fieldIndexToUpdate = newElements.findIndex(\n      (field) => id === field.fieldId\n    );\n\n    if (id === \"reset\") {\n      newElements[fieldIndexToUpdate].fieldValue = event.target.checked;\n    } else {\n      newElements[fieldIndexToUpdate].fieldValue = event.target.value;\n    }\n    setFieldElements(newElements);\n  };\n\n  return {\n    formLabel,\n    fieldElements,\n    showNotification,\n    notificationText,\n    handleSubmit,\n    handleChange,\n  };\n}\n","import CardUnstyled from \"@material-ui/core/Card\";\nimport styled from \"styled-components\";\n\nconst Card = styled(CardUnstyled)`\n  margin: 10px;\n  padding: 10px;\n`;\n\nexport default function TaskCardStyles() {\n  return { Card };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TaskCardStyles from \"./TaskCardStyles\";\n\nfunction getBriefName(taskName) {\n  const maxWords = 5;\n  const arrayOfWords = taskName.split(\" \");\n  let words = 0;\n  let i = 0;\n\n  // Removes consecutive whitespace characters\n  for (; i < arrayOfWords.length && words < maxWords; i += 1) {\n    if (arrayOfWords[i].length) words += 1;\n  }\n\n  return arrayOfWords.splice(0, i).join(\" \");\n}\n\nexport default function TaskCard({ name }) {\n  const { Card } = TaskCardStyles();\n  return <Card>{getBriefName(name)}</Card>;\n}\n\nTaskCard.propTypes = {\n  name: PropTypes.string,\n};\n\nTaskCard.defaultProps = {\n  name: \"TBD\",\n};\n","import styled from \"styled-components\";\n\nconst List = styled.div`\n  border-radius: 4px;\n  background-color: lightgray;\n  padding: 5px 5px 1px 5px;\n  width: 245px;\n`;\n\nexport default function TaskListStyles() {\n  return { List };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TaskCard from \"./TaskCard\";\nimport TaskListStyles from \"./TaskListStyles\";\n\nexport default function TaskList({ header, tasks }) {\n  const { List } = TaskListStyles();\n  const fullHeader = `${header} (${tasks.length})`;\n\n  return (\n    <List>\n      <b>{fullHeader}</b>\n      {tasks.map((task) => (\n        <TaskCard key={task.id} name={task.name} />\n      ))}\n    </List>\n  );\n}\n\nTaskList.propTypes = {\n  header: PropTypes.string,\n  tasks: PropTypes.arrayOf(PropTypes.object),\n};\n\nTaskList.defaultProps = {\n  header: \"TITLE NEEDED\",\n  tasks: [],\n};\n","import GridUnstyled from \"@material-ui/core/Grid\";\nimport styled from \"styled-components\";\n\nconst Grid = styled(GridUnstyled)``;\n\nexport default function DashboardPageViewStyles() {\n  return { Grid };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TaskList from \"../UI/TaskList\";\nimport Notification from \"../UI/Notification\";\nimport WhoopsiesHeader from \"../UI/WhoopsiesHeader\";\nimport DashboardPageViewStyles from \"./DashboardPageViewStyles\";\n\nexport default function DashboardPageView({ viewModel }) {\n  const { Grid } = DashboardPageViewStyles();\n  const STATUSES = [\n    \"TO DO\",\n    \"IN ANALYSIS\",\n    \"IN DEVELOPMENT\",\n    \"IN TESTING\",\n    \"DONE\",\n  ];\n\n  const displayLists = STATUSES.map((status) => {\n    const tasksOrganizedByStatus = viewModel.tasks.filter(\n      (task) => status === task.status\n    );\n    return (\n      <Grid key={status} item>\n        <TaskList header={status} tasks={tasksOrganizedByStatus} />\n      </Grid>\n    );\n  });\n  return (\n    <div data-testid=\"dashboard-page-view\">\n      <WhoopsiesHeader />\n      <Notification\n        show={viewModel.showNotification}\n        text={viewModel.notificationText}\n      />\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"flex-start\"\n        spacing={2}\n      >\n        {displayLists}\n      </Grid>\n    </div>\n  );\n}\n\nDashboardPageView.propTypes = {\n  viewModel: PropTypes.shape({\n    tasks: PropTypes.arrayOf(PropTypes.object),\n    showNotification: PropTypes.bool,\n    notificationText: PropTypes.string,\n  }),\n};\n\nDashboardPageView.defaultProps = {\n  viewModel: {\n    tasks: [],\n    showNotification: false,\n    notificationText: \"\",\n  },\n};\n","import { useEffect } from \"react\";\nimport TaskModel from \"../Models/TaskModel\";\nimport useTaskCreation from \"./CustomHooks/useTaskCreation\";\nimport useNotifications from \"./CustomHooks/useNotifications\";\n\nfunction prioritize(item1, item2) {\n  const priorities = [\"Cosmetic\", \"Low\", \"Medium\", \"High\", \"Showstopper\"];\n  return priorities.indexOf(item1.priority) > priorities.indexOf(item2.priority)\n    ? -1\n    : 1;\n}\n\nexport default function DashboardPageViewModel() {\n  const { getTasksFromDatabase } = TaskModel();\n  const { tasks, setTasks } = useTaskCreation();\n  const {\n    showNotification,\n    notificationText,\n    toggleNotification,\n  } = useNotifications();\n\n  useEffect(() => {\n    getTasksFromDatabase()\n      .then((retrievedTasks) => {\n        const prioritizedTasks = [...retrievedTasks].sort(prioritize);\n\n        setTasks(prioritizedTasks);\n        toggleNotification(\"Successfully retrieved the tasks!\");\n      })\n      .catch((err) => {\n        toggleNotification(err.toString());\n      });\n  }, [getTasksFromDatabase, setTasks, toggleNotification]);\n\n  return {\n    tasks,\n    showNotification,\n    notificationText,\n  };\n}\n","import DrawerUnstyled from \"@material-ui/core/Drawer\";\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\nimport QueueIcon from \"@material-ui/icons/Queue\";\nimport styled, { css } from \"styled-components\";\n\nconst Drawer = styled(DrawerUnstyled)`\n  * {\n    text-decoration: inherit;\n    color: inherit;\n    cursor: auto;\n  }\n`;\n\nconst iconStyles = css`\n  vertical-align: top;\n  font-size: 1.1rem !important;\n  margin-right: 8px;\n`;\n\nconst DashboardIcon = styled(ListAltIcon)`\n  ${iconStyles}\n`;\n\nconst CreateTaskIcon = styled(QueueIcon)`\n  ${iconStyles}\n`;\n\nexport default function SidebarStyles() {\n  return { Drawer, DashboardIcon, CreateTaskIcon };\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport SidebarStyles from \"./SidebarStyles\";\n\nexport default function Sidebar() {\n  const { Drawer, DashboardIcon, CreateTaskIcon } = SidebarStyles();\n  return (\n    <Drawer variant=\"permanent\">\n      <List>\n        <ListItem button>\n          <Link to=\"/whoopsies/dashboard\">\n            <DashboardIcon />\n            Dashboard\n          </Link>\n        </ListItem>\n        <ListItem button>\n          <Link to=\"/whoopsies/create-task\">\n            <CreateTaskIcon />\n            Create Task\n          </Link>\n        </ListItem>\n      </List>\n    </Drawer>\n  );\n}\n","import styled from \"styled-components\";\n\nconst Content = styled.main`\n  margin-left: 10em;\n`;\n\nexport default function AppStyles() {\n  return { Content };\n}\n","import { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport TaskCreationPageView from \"./components/Views/TaskCreationPageView\";\nimport TaskCreationPageViewModel from \"./components/ViewModels/TaskCreationPageViewModel\";\nimport DashboardPageView from \"./components/Views/DashboardPageView\";\nimport DashboardPageViewModel from \"./components/ViewModels/DashboardPageViewModel\";\nimport Sidebar from \"./components/UI/Sidebar\";\nimport AppStyles from \"./AppStyles\";\n\nfunction App() {\n  const { Content } = AppStyles();\n  return (\n    <Router basename=\"/\">\n      <Sidebar />\n      <Content>\n        <Route path=\"/whoopsies/dashboard\">\n          <DashboardPageView viewModel={DashboardPageViewModel()} />\n        </Route>\n        <Route path=\"/whoopsies/create-task\">\n          <TaskCreationPageView viewModel={TaskCreationPageViewModel()} />\n        </Route>\n      </Content>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport indexStyles from \"./indexStyles\";\n\nconst GlobalStyles = indexStyles();\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createGlobalStyle } from \"styled-components\";\n\nexport default function GlobalStyle() {\n  return createGlobalStyle`\n    * {\n      font-family: 'PT Sans', sans-serif;\n    }\n  `;\n}\n"],"sourceRoot":""}