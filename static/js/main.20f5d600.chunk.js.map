{"version":3,"sources":["components/Providers/FormContext.js","components/UI/CreateTaskStyles.js","components/UI/CreateTask.js","components/UI/NotificationStyles.js","components/UI/Notification.js","components/UI/WhoopsiesHeader.js","components/Views/TaskCreationPageView.js","components/Models/TaskModel.js","components/ViewModels/TaskFormFields.js","components/ViewModels/CustomHooks/useTaskCreation.js","components/ViewModels/CustomHooks/useNotifications.js","components/ViewModels/TaskCreationPageViewModel.js","components/UI/TaskCardStyles.js","components/UI/TaskCard.js","components/UI/TaskListStyles.js","components/UI/TaskList.js","components/Views/DashboardPageViewStyles.js","components/Views/DashboardPageView.js","components/ViewModels/DashboardPageViewModel.js","App.js","reportWebVitals.js","index.js"],"names":["FormContext","createContext","TextField","styled","TextFieldUnstyled","CreateTask","fields","handleSubmit","handleChange","useContext","displayFields","map","field","label","fieldLabel","variant","size","value","fieldValue","onChange","event","fieldId","onSubmit","e","Button","color","type","defaultProps","iconStyles","css","NotificationCard","Card","props","show","BellIcon","NotificationsIcon","ErrorIcon","ErrorIconUnstyled","Notification","text","displayIcon","includes","undefined","WhoopsiesHeader","startIcon","href","target","rel","TaskCreationPageView","viewModel","formLabel","showNotification","notificationText","Provider","AWS","config","update","region","endpoint","accessKeyId","secretAccessKey","docClient","DynamoDB","DocumentClient","table","addTaskToDatabase","newTask","id","project","name","description","status","priority","sprint","release","dateCreated","moment","format","params","TableName","Item","parseInt","dateUpdated","Promise","resolve","reject","put","err","Error","getTasksFromDatabase","scan","data","Items","TaskModel","TaskFormFields","fieldType","useTaskCreation","useState","fieldElements","setFieldElements","tasks","setTasks","useNotifications","setShowNotification","setNotificationText","toggleNotification","useCallback","message","setTimeout","TaskCreationPageViewModel","preventDefault","forEach","Object","assign","then","catch","toString","newElements","fieldIndexToUpdate","findIndex","CardUnstyled","TaskCard","List","div","TaskList","header","fullHeader","length","task","Grid","GridUnstyled","DashboardPageView","container","direction","justify","alignItems","spacing","item","DashboardPageViewModel","useEffect","retrievedTasks","App","path","from","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20f5d600.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst FormContext = createContext(null);\nexport default FormContext;\n","import TextFieldUnstyled from \"@material-ui/core/TextField\";\nimport styled from \"styled-components\";\n\nconst TextField = styled(TextFieldUnstyled)`\n  margin-right: 1em;\n`;\n\nexport default function CreateTaskStyles() {\n  return { TextField };\n}\n","import React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@material-ui/core/Button\";\nimport FormContext from \"../Providers/FormContext\";\nimport CreateTaskStyles from \"./CreateTaskStyles\";\n\nexport default function CreateTask({ fields, handleSubmit }) {\n  const { TextField } = CreateTaskStyles();\n  const handleChange = useContext(FormContext);\n  const displayFields = fields.map((field) => (\n    <TextField\n      key={field.fieldId}\n      label={field.fieldLabel}\n      variant=\"filled\"\n      size=\"small\"\n      value={field.fieldValue}\n      onChange={(event) => handleChange(field.fieldId, event)}\n    />\n  ));\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      {displayFields}\n      <Button variant=\"contained\" color=\"primary\" type=\"submit\" size=\"large\">\n        Create\n      </Button>\n    </form>\n  );\n}\n\nCreateTask.propTypes = {\n  fields: PropTypes.arrayOf(PropTypes.object),\n  handleSubmit: PropTypes.func,\n};\n\nCreateTask.defaultProps = {\n  fields: [],\n  handleSubmit: () => {},\n};\n","import Card from \"@material-ui/core/Card\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport ErrorIconUnstyled from \"@material-ui/icons/Error\";\nimport styled, { css } from \"styled-components\";\n\nconst iconStyles = css`\n  vertical-align: top;\n`;\n\nconst NotificationCard = styled(Card)`\n  background-color: #444;\n  color: white;\n  padding: 16px;\n  position: absolute;\n  top: ${(props) => (props.show ? \"1em\" : \"-10em\")};\n  right: 1em;\n  z-index: 999;\n  transition: top 1s ease;\n  width: 15em;\n`;\n\nconst BellIcon = styled(NotificationsIcon)`\n  ${iconStyles}\n`;\n\nconst ErrorIcon = styled(ErrorIconUnstyled)`\n  ${iconStyles}\n`;\n\nexport default function NotificationStyles() {\n  return {\n    NotificationCard,\n    BellIcon,\n    ErrorIcon,\n  };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport NotificationStyles from \"./NotificationStyles\";\n\nexport default function Notification({ text, show }) {\n  const { NotificationCard, BellIcon, ErrorIcon } = NotificationStyles();\n  const displayIcon = text.includes(\"Success\") ? <BellIcon /> : <ErrorIcon />;\n\n  return (\n    <NotificationCard show={show ? \"true\" : undefined}>\n      {displayIcon}\n      {text}\n    </NotificationCard>\n  );\n}\n\nNotification.propTypes = {\n  text: PropTypes.string,\n  show: PropTypes.bool,\n};\n\nNotification.defaultProps = {\n  text: \"\",\n  show: false,\n};\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Assignment from \"@material-ui/icons/Assignment\";\n\nexport default function WhoopsiesHeader() {\n  return (\n    <>\n      <h1>Whoopsies!</h1>\n      <p>\n        {\"An Issue Tracker for all your Oopsies! \"}\n        <Button variant=\"outlined\" color=\"primary\" startIcon={<Assignment />}>\n          <a\n            href=\"https://docs.google.com/document/d/1FgaHyxg0d-MKl4OlfG0u36fmp6jM5nZxvI3ZeXUq4vs/edit?usp=sharing\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            SRS\n          </a>\n        </Button>\n      </p>\n    </>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport FormContext from \"../Providers/FormContext\";\nimport CreateTask from \"../UI/CreateTask\";\nimport Notification from \"../UI/Notification\";\nimport WhoopsiesHeader from \"../UI/WhoopsiesHeader\";\n\nexport default function TaskCreationPageView({ viewModel }) {\n  return (\n    <>\n      <WhoopsiesHeader />\n      <h2>{viewModel.formLabel}</h2>\n      <Notification\n        show={viewModel.showNotification}\n        text={viewModel.notificationText}\n      />\n      <FormContext.Provider value={viewModel.handleChange}>\n        <CreateTask\n          fields={viewModel.fields}\n          handleSubmit={viewModel.handleSubmit}\n        />\n      </FormContext.Provider>\n    </>\n  );\n}\n\nTaskCreationPageView.propTypes = {\n  viewModel: PropTypes.shape({\n    formLabel: PropTypes.string,\n    fields: PropTypes.arrayOf(PropTypes.object),\n    showNotification: PropTypes.bool,\n    notificationText: PropTypes.string,\n    handleSubmit: PropTypes.func,\n    handleChange: PropTypes.func,\n  }),\n};\n\nTaskCreationPageView.defaultProps = {\n  viewModel: {\n    formLabel: \"\",\n    fields: [],\n    showNotification: false,\n    notificationText: \"\",\n    handleSubmit: () => {},\n    handleChange: () => {},\n  },\n};\n","import AWS from \"aws-sdk\";\nimport moment from \"moment\";\nimport { accessKeyId, secretAccessKey } from \"../../.awsconfig.json\";\n\nAWS.config.update({\n  region: \"us-east-2\",\n  endpoint: \"https://dynamodb.us-east-2.amazonaws.com\",\n  accessKeyId,\n  secretAccessKey,\n});\n\nconst docClient = new AWS.DynamoDB.DocumentClient();\nconst table = \"Oopsies-test\";\n\nfunction addTaskToDatabase(newTask) {\n  const {\n    id,\n    project,\n    name,\n    description,\n    status,\n    priority,\n    sprint,\n    release,\n  } = newTask;\n\n  const dateCreated = moment().format();\n\n  const params = {\n    TableName: table,\n    Item: {\n      project,\n      id: parseInt(id, 10),\n      name,\n      description,\n      status,\n      priority,\n      sprint,\n      release,\n      dateCreated,\n      dateUpdated: dateCreated,\n    },\n  };\n\n  return new Promise((resolve, reject) => {\n    docClient.put(params, (err) => {\n      return err ? reject(new Error(`Unable to add item. ${err}`)) : resolve();\n    });\n  });\n}\n\nfunction getTasksFromDatabase() {\n  const params = {\n    TableName: table,\n  };\n\n  return new Promise((resolve, reject) => {\n    docClient.scan(params, (err, data) => {\n      return err\n        ? reject(new Error(`Unable to scan table. ${err}`))\n        : resolve(data.Items);\n    });\n  });\n}\n\nexport default function TaskModel() {\n  return { addTaskToDatabase, getTasksFromDatabase };\n}\n","export default function TaskFormFields() {\n  return {\n    formLabel: \"Task Creation Form\",\n    fields: [\n      {\n        fieldId: \"id\",\n        fieldLabel: \"Task ID\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"project\",\n        fieldLabel: \"Project Name\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"name\",\n        fieldLabel: \"Task Name\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"description\",\n        fieldLabel: \"Task Description\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"status\",\n        fieldLabel: \"Status\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"priority\",\n        fieldLabel: \"Priority\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"sprint\",\n        fieldLabel: \"Sprint\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n      {\n        fieldId: \"release\",\n        fieldLabel: \"Release Date\",\n        fieldType: \"text\",\n        fieldValue: \"\",\n      },\n    ],\n  };\n}\n","import { useState } from \"react\";\nimport TaskFormFields from \"../TaskFormFields\";\n\nexport default function useTaskCreation() {\n  const [fieldElements, setFieldElements] = useState(TaskFormFields);\n  const [tasks, setTasks] = useState([]);\n  const { formLabel, fields } = fieldElements;\n\n  return {\n    formLabel,\n    fields,\n    tasks,\n    fieldElements,\n    setTasks,\n    setFieldElements,\n  };\n}\n","import { useState, useCallback } from \"react\";\n\nexport default function useNotifications() {\n  const [showNotification, setShowNotification] = useState(false);\n  const [notificationText, setNotificationText] = useState(\"\");\n\n  const toggleNotification = useCallback(\n    (message) => {\n      setNotificationText(message);\n      setShowNotification(true);\n      setTimeout(() => {\n        setShowNotification(false);\n      }, 3000);\n    },\n    [setShowNotification, setNotificationText]\n  );\n\n  return {\n    showNotification,\n    notificationText,\n    toggleNotification,\n  };\n}\n","import TaskModel from \"../Models/TaskModel\";\nimport TaskFormFields from \"./TaskFormFields\";\nimport useTaskCreation from \"./CustomHooks/useTaskCreation\";\nimport useNotifications from \"./CustomHooks/useNotifications\";\n\nexport default function TaskCreationPageViewModel() {\n  const { addTaskToDatabase } = TaskModel();\n  const {\n    formLabel,\n    fields,\n    tasks,\n    fieldElements,\n    setTasks,\n    setFieldElements,\n  } = useTaskCreation();\n\n  const {\n    showNotification,\n    notificationText,\n    toggleNotification,\n  } = useNotifications();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const newTask = {};\n    fieldElements.fields.forEach((field) => {\n      Object.assign(newTask, { [field.fieldId]: field.fieldValue });\n    });\n\n    addTaskToDatabase(newTask)\n      .then(() => {\n        setTasks([...tasks, newTask]);\n        toggleNotification(\"Successfully added the item!\");\n      })\n      .catch((err) => {\n        toggleNotification(err.toString());\n      });\n\n    setFieldElements(TaskFormFields);\n  };\n\n  const handleChange = (id, event) => {\n    const newElements = { ...fieldElements };\n    const fieldIndexToUpdate = newElements.fields.findIndex(\n      (field) => id === field.fieldId\n    );\n\n    newElements.fields[fieldIndexToUpdate].fieldValue = event.target.value;\n    setFieldElements(newElements);\n  };\n\n  return {\n    formLabel,\n    fields,\n    showNotification,\n    notificationText,\n    handleSubmit,\n    handleChange,\n  };\n}\n","import CardUnstyled from \"@material-ui/core/Card\";\nimport styled from \"styled-components\";\n\nconst Card = styled(CardUnstyled)`\n  margin: 5px 0px;\n`;\n\nexport default function TaskCardStyles() {\n  return { Card };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TaskCardStyles from \"./TaskCardStyles\";\n\nexport default function TaskCard({ name, priority, release }) {\n  const { Card } = TaskCardStyles();\n\n  return (\n    <Card variant=\"outlined\">\n      {\"Name: \"}\n      {name}\n      <br />\n      {\"Priority: \"}\n      {priority}\n      <br />\n      {\"Release Date: \"}\n      {release}\n    </Card>\n  );\n}\n\nTaskCard.propTypes = {\n  name: PropTypes.string,\n  priority: PropTypes.string,\n  release: PropTypes.string,\n};\n\nTaskCard.defaultProps = {\n  name: \"TBD\",\n  priority: \"\",\n  release: \"TBD\",\n};\n","import styled from \"styled-components\";\n\nconst List = styled.div`\n  border-radius: 4px;\n  background-color: lightgray;\n  padding: 1px 5px 1px 5px;\n`;\n\nexport default function TaskListStyles() {\n  return { List };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TaskCard from \"./TaskCard\";\nimport TaskListStyles from \"./TaskListStyles\";\n\nexport default function TaskList({ header, tasks }) {\n  const { List } = TaskListStyles();\n  const fullHeader = `${header} (${tasks.length})`;\n\n  return (\n    <List>\n      <b>{fullHeader}</b>\n      {tasks.map((task) => (\n        <TaskCard\n          key={task.id}\n          name={task.name}\n          priority={task.priority}\n          release={task.release}\n        />\n      ))}\n    </List>\n  );\n}\n\nTaskList.propTypes = {\n  header: PropTypes.string,\n  tasks: PropTypes.arrayOf(PropTypes.object),\n};\n\nTaskList.defaultProps = {\n  header: \"TITLE NEEDED\",\n  tasks: [],\n};\n","import GridUnstyled from \"@material-ui/core/Grid\";\nimport styled from \"styled-components\";\n\nconst Grid = styled(GridUnstyled)`\n  margin: 0px;\n`;\n\nexport default function DashboardPageViewStyles() {\n  return { Grid };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TaskList from \"../UI/TaskList\";\nimport Notification from \"../UI/Notification\";\nimport WhoopsiesHeader from \"../UI/WhoopsiesHeader\";\nimport DashboardPageViewStyles from \"./DashboardPageViewStyles\";\n\nexport default function DashboardPageView({ viewModel }) {\n  const { Grid } = DashboardPageViewStyles();\n  const HEADERS = [\n    \"TO DO\",\n    \"IN ANALYSIS\",\n    \"IN DEVELOPMENT\",\n    \"IN TESTING\",\n    \"DONE\",\n  ];\n\n  return (\n    <>\n      <WhoopsiesHeader />\n      <Notification\n        show={viewModel.showNotification}\n        text={viewModel.notificationText}\n      />\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"flex-start\"\n        spacing={5}\n      >\n        {HEADERS.map((header) => (\n          <Grid key={header} item>\n            {\" \"}\n            <TaskList header={header} tasks={viewModel.tasks} />\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n}\n\nDashboardPageView.propTypes = {\n  viewModel: PropTypes.shape({\n    tasks: PropTypes.arrayOf(PropTypes.object),\n    showNotification: PropTypes.bool,\n    notificationText: PropTypes.string,\n  }),\n};\n\nDashboardPageView.defaultProps = {\n  viewModel: {\n    tasks: [],\n    showNotification: false,\n    notificationText: \"\",\n  },\n};\n","import { useEffect } from \"react\";\nimport TaskModel from \"../Models/TaskModel\";\nimport useTaskCreation from \"./CustomHooks/useTaskCreation\";\nimport useNotifications from \"./CustomHooks/useNotifications\";\n\nexport default function DashboardPageViewModel() {\n  const { getTasksFromDatabase } = TaskModel();\n  const { tasks, setTasks } = useTaskCreation();\n  const {\n    showNotification,\n    notificationText,\n    toggleNotification,\n  } = useNotifications();\n\n  useEffect(() => {\n    getTasksFromDatabase()\n      .then((retrievedTasks) => {\n        setTasks(retrievedTasks);\n        toggleNotification(\"Successfully retrieved items!\");\n      })\n      .catch((err) => {\n        toggleNotification(err.toString());\n      });\n  }, [getTasksFromDatabase, setTasks, toggleNotification]);\n\n  return {\n    tasks,\n    showNotification,\n    notificationText,\n  };\n}\n","import \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport TaskCreationPageView from \"./components/Views/TaskCreationPageView\";\nimport TaskCreationPageViewModel from \"./components/ViewModels/TaskCreationPageViewModel\";\nimport DashboardPageView from \"./components/Views/DashboardPageView\";\nimport DashboardPageViewModel from \"./components/ViewModels/DashboardPageViewModel\";\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route path=\"/whoopsies/create-task\">\n            <TaskCreationPageView viewModel={TaskCreationPageViewModel()} />\n          </Route>\n          <Route path=\"/whoopsies/dashboard\">\n            <DashboardPageView viewModel={DashboardPageViewModel()} />\n          </Route>\n          <Redirect from=\"/whoopsies\" to=\"/whoopsies/create-task\" />\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}